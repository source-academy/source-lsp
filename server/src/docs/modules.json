{
  "painter": {
    "display_painter": {
      "label": "display_painter",
      "meta": "func",
      "title": "Auto-import from painter",
      "description": "```source\ndisplay_painter(painter) → Function\n```\nReturns a function that turns a given Frame into a Drawing, given the painter",
      "parameters": [
        "painter"
      ]
    },
    "draw_line": {
      "label": "draw_line",
      "meta": "func",
      "title": "Auto-import from painter",
      "description": "```source\ndraw_line(v_start, v_end) → void\n```\nDraw a line from v\\_start to v\\_end",
      "parameters": [
        "v_start",
        "v_end"
      ]
    }
  },
  "unity_academy": {
    "add_impulse_force": {
      "label": "add_impulse_force",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nadd_impulse_force(gameObjectIdentifier, force) → void\n```\nAdd an impulse force on the Rigidbody attached on the GameObject, **using its mass**.\n\nUsage of all physics functions under the Physics category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "force"
      ]
    },
    "add_vectors": {
      "label": "add_vectors",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nadd_vectors(vectorA, vectorB) → Vector3\n```\nAdd two 3D vectors together.",
      "parameters": [
        "vectorA",
        "vectorB"
      ]
    },
    "apply_rigidbody": {
      "label": "apply_rigidbody",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\napply_rigidbody(gameObjectIdentifier) → void\n```\nApply rigidbody (2D or 3D based on the current dimension mode) to the given GameObject to use Unity's physics engine.\n\nAll other functions under the Physics - Rigidbody category require calling this function first on the applied GameObjects.\n\nFor more information, see\n\n*   https://docs.unity3d.com/ScriptReference/Rigidbody.html (For 3D Mode)\n*   https://docs.unity3d.com/ScriptReference/Rigidbody2D.html (For 2D Mode)",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "copy_position": {
      "label": "copy_position",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ncopy_position(from, to, deltaPosition) → void\n```\nCopy the position values from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the position of the destination GameObject on the corresponding axis/axes unaffected by this function.",
      "parameters": [
        "from",
        "to",
        "deltaPosition"
      ]
    },
    "copy_rotation": {
      "label": "copy_rotation",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ncopy_rotation(from, to, deltaRotation) → void\n```\nCopy the rotation values (Euler angles) from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the rotation of the destination GameObject on the corresponding axis/axes unaffected by this function.",
      "parameters": [
        "from",
        "to",
        "deltaRotation"
      ]
    },
    "copy_scale": {
      "label": "copy_scale",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ncopy_scale(from, to, deltaScale) → void\n```\nCopy the scale values from one GameObject to another GameObject along with delta values.\n\nSet one or more coordinate value(s) in the `deltaPosition` Vector3 to the exact value \"999999\" (six nines) to remain the scale of the destination GameObject on the corresponding axis/axes unaffected by this function.",
      "parameters": [
        "from",
        "to",
        "deltaScale"
      ]
    },
    "cross": {
      "label": "cross",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ncross(vectorA, vectorB) → Vector3\n```\nCalcuate the cross product of two 3D vectors.",
      "parameters": [
        "vectorA",
        "vectorB"
      ]
    },
    "debug_log": {
      "label": "debug_log",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndebug_log(content) → void\n```\nLog to Unity Academy Embedded Frontend's console.\n\nYou can use rich text for the parameter `content`.",
      "parameters": [
        "content"
      ]
    },
    "debug_logerror": {
      "label": "debug_logerror",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndebug_logerror(content) → void\n```\nLog to Unity Academy Embedded Frontend's console, with red font color as highlighting.\n\nNote that this function does not \"really\" throw any error. It just logs a message with red font color and the student code will continue running normally after calling this function to log the error.\n\nYou can use rich text for the parameter `content`.",
      "parameters": [
        "content"
      ]
    },
    "debug_logwarning": {
      "label": "debug_logwarning",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndebug_logwarning(content) → void\n```\nLog to Unity Academy Embedded Frontend's console, with yellow font color as highlighting.\n\nYou can use rich text for the parameter `content`.",
      "parameters": [
        "content"
      ]
    },
    "delta_time": {
      "label": "delta_time",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndelta_time() → number\n```\nReturns the value of Time.deltaTime in Unity ( roughly saying it's about `1 / instant_frame_rate_per_second` )\n\nThis should be useful when implementing timers or constant speed control in Update function.\n\nFor example:\n\n    function update(gameObject){\n        const move_speed = 3;\n        translate_world(gameObject, 0, 0, move_speed * delta_time());\n    }\n\nBy assigning the above code to a GameObject with `set_update`, that GameObject will move in a constant speed for about 3 units per second along world +Z axis.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Time-deltaTime.html",
      "parameters": []
    },
    "destroy": {
      "label": "destroy",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndestroy(gameObjectIdentifier) → void\n```\nRemoves a GameObject\n\nNote that this won't remove the GameObject immediately, the actual removal will happen at the end of the current main cycle loop.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Object.Destroy.html",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "dot": {
      "label": "dot",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ndot(vectorA, vectorB) → number\n```\nCalcuate the dot product of two 3D vectors.",
      "parameters": [
        "vectorA",
        "vectorB"
      ]
    },
    "gameobject_distance": {
      "label": "gameobject_distance",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ngameobject_distance(gameObjectIdentifier_A, gameObjectIdentifier_B) → number\n```\nCalcuate the distance between two GameObjects, based on each other's position",
      "parameters": [
        "gameObjectIdentifier_A",
        "gameObjectIdentifier_B"
      ]
    },
    "get_angular_velocity": {
      "label": "get_angular_velocity",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_angular_velocity(gameObjectIdentifier) → Vector3\n```\nReturns the angular velocity of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n\n\\*\\*2D Mode Special: \\*\\*In 2D mode there is no angular velocity on X nor Y axis, so in the X and Y values in the returned Vector3 will always be zero.",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_custom_prop": {
      "label": "get_custom_prop",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_custom_prop(gameObjectIdentifier, propName) → any\n```\nGet the value of a custom property with its name on a GameObject",
      "parameters": [
        "gameObjectIdentifier",
        "propName"
      ]
    },
    "get_key": {
      "label": "get_key",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_key(keyCode) → boolean\n```\nWhen user presses a key on the keyboard or mouse button, this function will return true in every frame that the key is still being pressed and false otherwise.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKey.html",
      "parameters": [
        "keyCode"
      ]
    },
    "get_key_down": {
      "label": "get_key_down",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_key_down(keyCode) → boolean\n```\nWhen user presses a key on the keyboard or mouse button, this function will return true only at the frame when the key is just pressed down and return false afterwards.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyDown.html",
      "parameters": [
        "keyCode"
      ]
    },
    "get_key_up": {
      "label": "get_key_up",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_key_up(keyCode) → boolean\n```\nWhen user releases a pressed key on the keyboard or mouse button, this function will return true only at the frame when the key is just released up and return false otherwise.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Input.GetKeyUp.html",
      "parameters": [
        "keyCode"
      ]
    },
    "get_main_camera_following_target": {
      "label": "get_main_camera_following_target",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_main_camera_following_target() → GameObjectIdentifier\n```\nGet the main camera following target GameObject (an invisible GameObject) to use it to control the position of the main camera with the default camera controller.\n\n*   **In 3D mode**, the default camera controller behaves as third-person camera controller, and the center to follow is the following target GameObject. Also, Unity Academy will automatically set the rotation of this \"following target\" to the same rotation as the current main camera's rotation to let you get the main camera's rotation.\n*   **In 2D mode**, the default camera controller will follow the target GameObject to move, along with a position delta value that you can adjust with the arrow keys on your keyboard.\n\nThe main camera following target GameObject is a primitive GameObject. This means that you are not allowed to destroy it and/or instantiate it during runtime. Multiple calls to this function will return GameObject identifiers that refer to the same primitive GameObject.\n\n**If default main camera controllers are disabled (you have called `request_for_main_camera_control`), then the following target GameObject is useless.**",
      "parameters": []
    },
    "get_mass": {
      "label": "get_mass",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_mass(gameObjectIdentifier) → number\n```\nReturns the mass of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_position": {
      "label": "get_position",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_position(gameObjectIdentifier) → Vector3\n```\nReturns the world position of a given GameObject",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_rotation_euler": {
      "label": "get_rotation_euler",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_rotation_euler(gameObjectIdentifier) → Vector3\n```\nReturns the world Euler angle rotation of a given GameObject",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_scale": {
      "label": "get_scale",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_scale(gameObjectIdentifier) → Vector3\n```\nReturns the scale (size factor) of a given GameObject\n\nBy default the scale of a GameObject is (1, 1, 1)",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_velocity": {
      "label": "get_velocity",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_velocity(gameObjectIdentifier) → Vector3\n```\nReturns the velocity of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "get_x": {
      "label": "get_x",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_x(vector) → number\n```\nGet the X component of a 3D vector",
      "parameters": [
        "vector"
      ]
    },
    "get_y": {
      "label": "get_y",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_y(vector) → number\n```\nGet the Y component of a 3D vector",
      "parameters": [
        "vector"
      ]
    },
    "get_z": {
      "label": "get_z",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nget_z(vector) → number\n```\nGet the Z component of a 3D vector",
      "parameters": [
        "vector"
      ]
    },
    "gui_button": {
      "label": "gui_button",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ngui_button(text, x, y, width, height, onClick) → void\n```\nMake a button on the screen with given **screen space position** in the current frame. When user clicks the button, the `onClick` function will be called.\n\nThe origin of screen space is upper-left corner and the positive Y direction is downward.\n\nThe drawn button will only last for one frame. You should put this under the `Update` function (or a function that is called by the `Update` function) to keep the button stays in every frame.\n\nIf this function is called by a lifecycle event function, then the `onClick` function in the fourth parameter could also be considered as a lifecycle event function.\n\nThis means that you can use other functions from this module inside the `onClick` function, even though the functions are not under the `Outside Lifecycle` category.\n\nFor example, the code piece below\n\n    import {init_unity_academy_3d, set_start, set_update, instantiate, gui_button, set_position }\n    from \"unity_academy\";\n    init_unity_academy_3d();\n    \n    const cube = instantiate(\"cube\");\n    \n    const cube_update = (gameObject) => {\n      gui_button(\"Button\", 1000, 300, 200, 50, ()=>\n        set_position(gameObject, 0, 10, 6) // calling set_position inside the onClick function\n      );\n    };\n    \n    set_update(cube, cube_update);\n\nis correct.\n\nYou can use rich text for the parameter `text`. For example: `gui_button(\"<color=#AA00FF>Hello World</color>\", 100, 100, 200, 50, my_onclick_function);`",
      "parameters": [
        "text",
        "x",
        "y",
        "width",
        "height",
        "onClick"
      ]
    },
    "gui_label": {
      "label": "gui_label",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ngui_label(text, x, y) → void\n```\nDraw a text (string) on the screen with given **screen space position** in the current frame.\n\nThe origin of screen space is upper-left corner and the positive Y direction is downward.\n\nThe drawn text will only last for one frame. You should put this under the `Update` function (or a function that is called by the `Update` function) to keep the text stays in every frame.\n\nYou can use rich text for the parameter `text`. For example: `gui_label(\"<color=#AA00FF>Hello World</color>\", 100, 100);`",
      "parameters": [
        "text",
        "x",
        "y"
      ]
    },
    "init_unity_academy_2d": {
      "label": "init_unity_academy_2d",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ninit_unity_academy_2d() → void\n```\nLoad and initialize Unity Academy WebGL player and set it to 2D mode. All other functions (except Maths functions) in this module requires calling this function or `init_unity_academy_3d` first.\n\nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.",
      "parameters": []
    },
    "init_unity_academy_3d": {
      "label": "init_unity_academy_3d",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ninit_unity_academy_3d() → void\n```\nLoad and initialize Unity Academy WebGL player and set it to 3D mode. All other functions (except Maths functions) in this module requires calling this function or `init_unity_academy_2d` first.\n\nI recommand you just call this function at the beginning of your Source Unity program under the 'import' statements.",
      "parameters": []
    },
    "instantiate": {
      "label": "instantiate",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ninstantiate(prefab_name) → GameObjectIdentifier\n```\nCreates a new GameObject from an existing Prefab\n\n**3D mode only**\n\nA prefab is something that is pre-built and can be created and used as a whole.\n\nAvailable Prefab Information: <a href = 'https://unity-academy.s3.ap-southeast-1.amazonaws.com/webgl\\_assetbundles/prefab\\_info.html' rel=\"noopener noreferrer\" target=\"\\_blank\">Click Here</a>",
      "parameters": [
        "prefab_name"
      ]
    },
    "instantiate_empty": {
      "label": "instantiate_empty",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ninstantiate_empty() → GameObjectIdentifier\n```\nCreates a new empty GameObject.\n\nAn empty GameObject is invisible and only have transform properties by default.\n\nYou may use the empty GameObject to run some general game management code or use the position of the empty GameObject to represent a point in the scene that the rest of your codes can access and utilize.",
      "parameters": []
    },
    "instantiate_sprite": {
      "label": "instantiate_sprite",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ninstantiate_sprite(sourceImageUrl) → GameObjectIdentifier\n```\nCreates a new 2D Sprite GameObject from an online image.\n\nThe Sprite GameObject has a BoxCollider2D that matches its size by default. You may use `remove_collider_components` function to remove the default collider.\n\nNote that Unity Academy will use a HTTP GET request to download the image, which means that the HTTP response from the URL must allows CORS.\n\n**2D mode only**",
      "parameters": [
        "sourceImageUrl"
      ]
    },
    "look_at": {
      "label": "look_at",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nlook_at(gameObjectIdentifier, position) → void\n```\nRotates the GameObject's transform so the local forward vector points at the given position.\n\nThe +Z direction of the GameObject (with respect to the GameObject's local space), which denotes forward in Unity's conventions, will pointing to the given position.\n\nFor more information, see https://docs.unity3d.com/ScriptReference/Transform.LookAt.html",
      "parameters": [
        "gameObjectIdentifier",
        "position"
      ]
    },
    "magnitude": {
      "label": "magnitude",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nmagnitude(vector) → number\n```\nCalcuate the magnitude of a vector",
      "parameters": [
        "vector"
      ]
    },
    "normalize": {
      "label": "normalize",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nnormalize(vector) → Vector3\n```\nNormalize a vector. The returned vector will have the same direction as the original vector but have a magnitude of 1.",
      "parameters": [
        "vector"
      ]
    },
    "on_collision_enter": {
      "label": "on_collision_enter",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\non_collision_enter(gameObjectIdentifier, eventFunction) → void\n```\nSet the lifecycle event function that will be called when the collider on this GameObject just starting colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n*   Note that for collision detaction to happen, for the two colliding GameObjects:\n    *   if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n    *   if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n*   https://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html (For 3D Mode)\n*   https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionEnter2D.html (For 2D Mode)",
      "parameters": [
        "gameObjectIdentifier",
        "eventFunction"
      ]
    },
    "on_collision_exit": {
      "label": "on_collision_exit",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\non_collision_exit(gameObjectIdentifier, eventFunction) → void\n```\nSet the lifecycle event function that will be called when the collider on this GameObject just stops colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n*   Note that for collision detaction to happen, for the two colliding GameObjects:\n    *   if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n    *   if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n*   https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit.html (For 3D Mode)\n*   https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionExit2D.html (For 2D Mode)",
      "parameters": [
        "gameObjectIdentifier",
        "eventFunction"
      ]
    },
    "on_collision_stay": {
      "label": "on_collision_stay",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\non_collision_stay(gameObjectIdentifier, eventFunction) → void\n```\nSet the lifecycle event function that will be called per frame when the collider on this GameObject is colliding with another collider.\n\nThe given function should contain two parameters. The first parameter refers to the binded GameObject and the second parameter refers to the other GameObject that collides with the binded GameObject (both parameters are GameObject identifiers).\n\nFor example: `const myFunction = (self, other) => {...};`\n\n*   Note that for collision detaction to happen, for the two colliding GameObjects:\n    *   if **in 3D mode**, both GameObjects must applied Rigidbody by `apply_rigidbody`\n    *   if **in 2D mode**, at least one GameObject must applied Rigidbody by `apply_rigidbody`\n\nFor more information, see\n\n*   https://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html (For 3D Mode)\n*   https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnCollisionStay2D.html (For 2D Mode)",
      "parameters": [
        "gameObjectIdentifier",
        "eventFunction"
      ]
    },
    "play_animator_state": {
      "label": "play_animator_state",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nplay_animator_state(gameObjectIdentifier, animatorStateName) → void\n```\nPlays an Unity animation state with given name on the GameObject's animator. Note that not all game objects have Unity animations. You should ask the people who provided you the prefab asset bundle for available animation names assigned to the prefab.\n\nIf you provide an invalid animator state name, this function will not take effect.\n\n**3D mode only**",
      "parameters": [
        "gameObjectIdentifier",
        "animatorStateName"
      ]
    },
    "point_distance": {
      "label": "point_distance",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\npoint_distance(pointA, pointB) → number\n```\nCalcuate the distance between two 3D points",
      "parameters": [
        "pointA",
        "pointB"
      ]
    },
    "remove_collider_components": {
      "label": "remove_collider_components",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nremove_collider_components(gameObjectIdentifier) → void\n```\nRemoves all collider components directly attached on the given GameObject by default.\n\nYou can use this function on GameObjects those you don't want them to collide with other GameObjects.\n\nFor example, you may use this on the background image sprite GameObject in 2D scene.",
      "parameters": [
        "gameObjectIdentifier"
      ]
    },
    "request_for_main_camera_control": {
      "label": "request_for_main_camera_control",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nrequest_for_main_camera_control() → GameObjectIdentifier\n```\nRequest for main camera control and get a GameObject identifier that can directly be used to control the main camera's position and rotation.\n\nWhen you request for the direct control over main camera with this function, the default camera controllers will be disabled, thus the GameObject identifier returned by `get_main_camera_following_target` will become useless, as you can no longer use the default main camera controllers.\n\nThis function is for totally customizing the position and rotation of the main camera. If you'd like to simplify the camera controlling with the help of the default camera controllers in Unity Academy, please consider use `get_main_camera_following_target` function.",
      "parameters": []
    },
    "rotate_world": {
      "label": "rotate_world",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nrotate_world(gameObjectIdentifier, angles) → void\n```\nRotates a GameObject with given x, y and z values (Euler angle)",
      "parameters": [
        "gameObjectIdentifier",
        "angles"
      ]
    },
    "same_gameobject": {
      "label": "same_gameobject",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nsame_gameobject(first, second) → boolean\n```\nDetermines whether two GameObject identifiers refers to the same GameObject.",
      "parameters": [
        "first",
        "second"
      ]
    },
    "scale_vector": {
      "label": "scale_vector",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nscale_vector(vector, factor) → Vector3\n```\nScales a 3D vector with the given factor.",
      "parameters": [
        "vector",
        "factor"
      ]
    },
    "set_angular_drag": {
      "label": "set_angular_drag",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_angular_drag(gameObjectIdentifier, value) → void\n```\nSet the angular drag (similar to an air resistance that affects angular velocity) the rigidbody attached on the game object.\n\nBy default the angular drag is 0.05\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "value"
      ]
    },
    "set_angular_velocity": {
      "label": "set_angular_velocity",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_angular_velocity(gameObjectIdentifier, angularVelocity) → void\n```\nSet the angular velocity of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.\n\n\\*\\*2D Mode Special: \\*\\*In 2D mode there is no angular velocity on X nor Y axis, so the X and Y values in the Vector3 is ignored.",
      "parameters": [
        "gameObjectIdentifier",
        "angularVelocity"
      ]
    },
    "set_custom_prop": {
      "label": "set_custom_prop",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_custom_prop(gameObjectIdentifier, propName, value) → void\n```\nSet a custom property with name and value on a GameObject",
      "parameters": [
        "gameObjectIdentifier",
        "propName",
        "value"
      ]
    },
    "set_drag": {
      "label": "set_drag",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_drag(gameObjectIdentifier, value) → void\n```\nSet the drag (similar to air resistance) the rigidbody attached on the game object.\n\nBy default the drag is zero.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "value"
      ]
    },
    "set_mass": {
      "label": "set_mass",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_mass(gameObjectIdentifier, mass) → void\n```\nSet the mass of the rigidbody attached on the game object.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "mass"
      ]
    },
    "set_position": {
      "label": "set_position",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_position(gameObjectIdentifier, position) → void\n```\nSet the world position of a given GameObject",
      "parameters": [
        "gameObjectIdentifier",
        "position"
      ]
    },
    "set_rotation_euler": {
      "label": "set_rotation_euler",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_rotation_euler(gameObjectIdentifier, rotation) → void\n```\nSet the world rotation of a given GameObject with given Euler angle rotation.",
      "parameters": [
        "gameObjectIdentifier",
        "rotation"
      ]
    },
    "set_scale": {
      "label": "set_scale",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_scale(gameObjectIdentifier, scale) → void\n```\nSet the scale (size) of a given GameObject\n\nBy default the scale of a GameObject is (1, 1, 1). Changing the scale of a GameObject along one axis will lead to a stretch or squeeze of the GameObject along that axis.",
      "parameters": [
        "gameObjectIdentifier",
        "scale"
      ]
    },
    "set_start": {
      "label": "set_start",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_start(gameObjectIdentifier, startFunction) → void\n```\nSets the Start function of a given GameObject",
      "parameters": [
        "gameObjectIdentifier",
        "startFunction"
      ]
    },
    "set_update": {
      "label": "set_update",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_update(gameObjectIdentifier, updateFunction) → void\n```\nSets the Update function of a given GameObject",
      "parameters": [
        "gameObjectIdentifier",
        "updateFunction"
      ]
    },
    "set_use_gravity": {
      "label": "set_use_gravity",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_use_gravity(gameObjectIdentifier, useGravity) → void\n```\nSet whether the rigidbody attached on the game object should calculate for gravity.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "useGravity"
      ]
    },
    "set_velocity": {
      "label": "set_velocity",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nset_velocity(gameObjectIdentifier, velocity) → void\n```\nSet the (linear) velocity of the rigidbody attached on the GameObject.\n\nUsage of all physics functions under the Physics - Rigidbody category requires calling `apply_rigidbody` first on the applied game objects.",
      "parameters": [
        "gameObjectIdentifier",
        "velocity"
      ]
    },
    "translate_local": {
      "label": "translate_local",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ntranslate_local(gameObjectIdentifier, deltaPosition) → void\n```\nMoves a GameObject with given x, y and z values, **with respect to its local space**.\n\nThe current rotation of the GameObject will affect the real direction of movement.\n\nIn Unity, usually, the direction of +Z axis denotes forward.",
      "parameters": [
        "gameObjectIdentifier",
        "deltaPosition"
      ]
    },
    "translate_world": {
      "label": "translate_world",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\ntranslate_world(gameObjectIdentifier, deltaPosition) → void\n```\nMoves a GameObject with given x, y and z values",
      "parameters": [
        "gameObjectIdentifier",
        "deltaPosition"
      ]
    },
    "vector3": {
      "label": "vector3",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nvector3(x, y, z) → Vector3\n```\nCreate a 3D vector",
      "parameters": [
        "x",
        "y",
        "z"
      ]
    },
    "vector_difference": {
      "label": "vector_difference",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nvector_difference(vectorA, vectorB) → Vector3\n```\nCalcuate the vector difference between two vectors (vectorA - vectorB).",
      "parameters": [
        "vectorA",
        "vectorB"
      ]
    },
    "zero_vector": {
      "label": "zero_vector",
      "meta": "func",
      "title": "Auto-import from unity_academy",
      "description": "```source\nzero_vector() → Vector3\n```\nGet the zero vector",
      "parameters": []
    }
  },
  "plotly": {
    "draw_connected_2d": {
      "label": "draw_connected_2d",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\ndraw_connected_2d(numPoints) → CurvePlotFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points and connecting each pair with a line.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_connected_3d": {
      "label": "draw_connected_3d",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\ndraw_connected_3d(numPoints) → CurvePlotFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points and connecting each pair with a line.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_points_2d": {
      "label": "draw_points_2d",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\ndraw_points_2d(numPoints) → CurvePlotFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at num sample points. The Drawing consists of isolated points, and does not connect them. When a program evaluates to a Drawing, the Source system displays it graphically, in a window,\n\n\\*",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_points_3d": {
      "label": "draw_points_3d",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\ndraw_points_3d(numPoints) → CurvePlotFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at num sample points. The Drawing consists of isolated points, and does not connect them. When a program evaluates to a Drawing, the Source system displays it graphically, in a window,\n\n\\*",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_sound_2d": {
      "label": "draw_sound_2d",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\ndraw_sound_2d(sound) → void\n```\nVisualizes the sound on a 2d line graph",
      "parameters": [
        "sound"
      ]
    },
    "new_plot": {
      "label": "new_plot",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\nnew_plot(data) → void\n```\nAdds a new plotly plot to the context which will be rendered in the Plotly Tabs",
      "parameters": [
        "data"
      ]
    },
    "new_plot_json": {
      "label": "new_plot_json",
      "meta": "func",
      "title": "Auto-import from plotly",
      "description": "```source\nnew_plot_json(data) → void\n```\nAdds a new plotly plot to the context which will be rendered in the Plotly Tabs",
      "parameters": [
        "data"
      ]
    }
  },
  "repeat": {
    "repeat": {
      "label": "repeat",
      "meta": "func",
      "title": "Auto-import from repeat",
      "description": "```source\nrepeat(func, n) → Function\n```\nReturns a new function which when applied to an argument, has the same effect as applying the specified function to the same argument n times.",
      "parameters": [
        "func",
        "n"
      ]
    },
    "thrice": {
      "label": "thrice",
      "meta": "func",
      "title": "Auto-import from repeat",
      "description": "```source\nthrice(func) → Function\n```\nReturns a new function which when applied to an argument, has the same effect as applying the specified function to the same argument 3 times.",
      "parameters": [
        "func"
      ]
    },
    "twice": {
      "label": "twice",
      "meta": "func",
      "title": "Auto-import from repeat",
      "description": "```source\ntwice(func) → Function\n```\nReturns a new function which when applied to an argument, has the same effect as applying the specified function to the same argument 2 times.",
      "parameters": [
        "func"
      ]
    }
  },
  "pix_n_flix": {
    "alpha_of": {
      "label": "alpha_of",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nalpha_of(pixel) → number\n```\nReturns the alpha component of the given pixel.",
      "parameters": [
        "pixel"
      ]
    },
    "blue_of": {
      "label": "blue_of",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nblue_of(pixel) → number\n```\nReturns the blue component of the given pixel.",
      "parameters": [
        "pixel"
      ]
    },
    "compose_filter": {
      "label": "compose_filter",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\ncompose_filter(filter1, filter2) → Filter\n```\nReturns a new filter that is equivalent to applying filter1 and then filter2.",
      "parameters": [
        "filter1",
        "filter2"
      ]
    },
    "copy_image": {
      "label": "copy_image",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\ncopy_image(src, dest) → void\n```\nThe default filter that just copies the source image to the destination image.",
      "parameters": [
        "src",
        "dest"
      ]
    },
    "get_video_time": {
      "label": "get_video_time",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nget_video_time() → number\n```\nReturns the elapsed time in milliseconds since the start of the video.",
      "parameters": []
    },
    "green_of": {
      "label": "green_of",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\ngreen_of(pixel) → number\n```\nReturns the green component of the given pixel.",
      "parameters": [
        "pixel"
      ]
    },
    "image_height": {
      "label": "image_height",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nimage_height() → number\n```\nReturns the current height of the displayed images in pixels, i.e. the number of pixels in the vertical dimension.",
      "parameters": []
    },
    "image_width": {
      "label": "image_width",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nimage_width() → number\n```\nReturns the current width of the displayed images in pixels, i.e. the number of pixels in the horizontal dimension.",
      "parameters": []
    },
    "install_filter": {
      "label": "install_filter",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\ninstall_filter(_filter) → void\n```\nInstalls the given filter to be used to transform each source image from the live camera or from a local/remote file to a destination image that is then displayed on screen.\n\nA filter is a function that is applied to two two-dimensional arrays of Pixels: the source image and the destination image.",
      "parameters": [
        "_filter"
      ]
    },
    "keep_aspect_ratio": {
      "label": "keep_aspect_ratio",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nkeep_aspect_ratio(_keepAspectRatio) → void\n```\nSets pix\\_n\\_flix to preserve the aspect ratio of the video or image",
      "parameters": [
        "_keepAspectRatio"
      ]
    },
    "pause_at": {
      "label": "pause_at",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\npause_at(pause_time) → void\n```\nPauses the video at a set time after the video starts.",
      "parameters": [
        "pause_time"
      ]
    },
    "red_of": {
      "label": "red_of",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nred_of(pixel) → number\n```\nReturns the red component of the given pixel.",
      "parameters": [
        "pixel"
      ]
    },
    "reset_filter": {
      "label": "reset_filter",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nreset_filter() → void\n```\nResets the installed filter to the default filter.",
      "parameters": []
    },
    "set_dimensions": {
      "label": "set_dimensions",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nset_dimensions(width, height) → void\n```\nSets the diemsions of the displayed images. Note: Only accepts width and height values within the range of 1 to 500.",
      "parameters": [
        "width",
        "height"
      ]
    },
    "set_fps": {
      "label": "set_fps",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nset_fps(fps) → void\n```\nSets the framerate (i.e. frames per second (FPS)) of the video. Note: Only accepts FPS values within the range of 2 to 30.",
      "parameters": [
        "fps"
      ]
    },
    "set_loop_count": {
      "label": "set_loop_count",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nset_loop_count(n) → void\n```\nSets the number of times the video is played. If the number of times the video repeats is negative, the video will loop forever.",
      "parameters": [
        "n"
      ]
    },
    "set_rgba": {
      "label": "set_rgba",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nset_rgba(pixel, r, g, b, a) → void\n```\nAssigns the given red, green, blue and alpha component values to the given pixel.",
      "parameters": [
        "pixel",
        "r",
        "g",
        "b",
        "a"
      ]
    },
    "set_volume": {
      "label": "set_volume",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nset_volume(volume) → void\n```\nSets the audio volume of the local video file played. Note: Only accepts volume value within the range of 0 to 100.",
      "parameters": [
        "volume"
      ]
    },
    "start": {
      "label": "start",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nstart() → StartPacket\n```\nStarts processing the image or video using the installed filter.",
      "parameters": []
    },
    "use_image_url": {
      "label": "use_image_url",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nuse_image_url(URL) → void\n```\nSets pix\\_n\\_flix to use the image from the given URL as the image feed instead of using the default live camera feed.",
      "parameters": [
        "URL"
      ]
    },
    "use_local_file": {
      "label": "use_local_file",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nuse_local_file() → void\n```\nSets pix\\_n\\_flix to use video or image feed from a local file instead of using the default live camera feed.",
      "parameters": []
    },
    "use_video_url": {
      "label": "use_video_url",
      "meta": "func",
      "title": "Auto-import from pix_n_flix",
      "description": "```source\nuse_video_url(URL) → void\n```\nSets pix\\_n\\_flix to use the video from the given URL as the video feed instead of using the default live camera feed.",
      "parameters": [
        "URL"
      ]
    }
  },
  "binary_tree": {
    "entry": {
      "label": "entry",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nentry(t) → boolean\n```\nReturns the entry of a given binary tree.",
      "parameters": [
        "t"
      ]
    },
    "is_empty_tree": {
      "label": "is_empty_tree",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nis_empty_tree(value) → boolean\n```\nReturns a boolean value, indicating whether the given value is an empty binary tree.",
      "parameters": [
        "value"
      ]
    },
    "is_tree": {
      "label": "is_tree",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nis_tree(value) → boolean\n```\nReturns a boolean value, indicating whether the given value is a binary tree.",
      "parameters": [
        "value"
      ]
    },
    "left_branch": {
      "label": "left_branch",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nleft_branch(t) → BinaryTree\n```\nReturns the left branch of a given binary tree.",
      "parameters": [
        "t"
      ]
    },
    "make_empty_tree": {
      "label": "make_empty_tree",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nmake_empty_tree() → BinaryTree\n```\nReturns an empty binary tree, represented by the empty list null",
      "parameters": []
    },
    "make_tree": {
      "label": "make_tree",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nmake_tree(value, left, right) → BinaryTree\n```\nReturns a binary tree node composed of the specified left subtree, value and right subtree.",
      "parameters": [
        "value",
        "left",
        "right"
      ]
    },
    "right_branch": {
      "label": "right_branch",
      "meta": "func",
      "title": "Auto-import from binary_tree",
      "description": "```source\nright_branch(t) → BinaryTree\n```\nReturns the right branch of a given binary tree.",
      "parameters": [
        "t"
      ]
    }
  },
  "copy_gc": {
    "allHeap": {
      "label": "allHeap",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nallHeap(newHeap) → void\n```\nNo description available",
      "parameters": [
        "newHeap"
      ]
    },
    "doneShowRoot": {
      "label": "doneShowRoot",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\ndoneShowRoot(heap) → void\n```\nNo description available",
      "parameters": [
        "heap"
      ]
    },
    "endFlip": {
      "label": "endFlip",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nendFlip(left, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap"
      ]
    },
    "generateMemory": {
      "label": "generateMemory",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\ngenerateMemory() → void\n```\nNo description available",
      "parameters": []
    },
    "init": {
      "label": "init",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\ninit() → Object\n```\nNo description available",
      "parameters": []
    },
    "initialize_memory": {
      "label": "initialize_memory",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\ninitialize_memory(memorySize) → void\n```\nNo description available",
      "parameters": [
        "memorySize"
      ]
    },
    "initialize_tag": {
      "label": "initialize_tag",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\ninitialize_tag(allTag, types) → void\n```\nNo description available",
      "parameters": [
        "allTag",
        "types"
      ]
    },
    "newAssign": {
      "label": "newAssign",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewAssign(res, left, heap) → void\n```\nNo description available",
      "parameters": [
        "res",
        "left",
        "heap"
      ]
    },
    "newCommand": {
      "label": "newCommand",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewCommand(type, toSpace, fromSpace, left, right, sizeLeft, sizeRight, heap, description, firstDesc, lastDesc) → void\n```\nNo description available",
      "parameters": [
        "type",
        "toSpace",
        "fromSpace",
        "left",
        "right",
        "sizeLeft",
        "sizeRight",
        "heap",
        "description",
        "firstDesc",
        "lastDesc"
      ]
    },
    "newCopy": {
      "label": "newCopy",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewCopy(left, right, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "right",
        "heap"
      ]
    },
    "newNew": {
      "label": "newNew",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewNew(left, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap"
      ]
    },
    "newPop": {
      "label": "newPop",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewPop(res, left, right, heap) → void\n```\nNo description available",
      "parameters": [
        "res",
        "left",
        "right",
        "heap"
      ]
    },
    "newPush": {
      "label": "newPush",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nnewPush(left, right, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "right",
        "heap"
      ]
    },
    "resetFromSpace": {
      "label": "resetFromSpace",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nresetFromSpace(fromSpace, heap) → number[]\n```\nNo description available",
      "parameters": [
        "fromSpace",
        "heap"
      ]
    },
    "resetRoots": {
      "label": "resetRoots",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nresetRoots() → void\n```\nNo description available",
      "parameters": []
    },
    "scanFlip": {
      "label": "scanFlip",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nscanFlip(left, right, scan, free, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "right",
        "scan",
        "free",
        "heap"
      ]
    },
    "showRoots": {
      "label": "showRoots",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nshowRoots(left, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap"
      ]
    },
    "startFlip": {
      "label": "startFlip",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nstartFlip(toSpace, fromSpace, heap) → void\n```\nNo description available",
      "parameters": [
        "toSpace",
        "fromSpace",
        "heap"
      ]
    },
    "updateRoots": {
      "label": "updateRoots",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nupdateRoots(array) → void\n```\nNo description available",
      "parameters": [
        "array"
      ]
    },
    "updateSlotSegment": {
      "label": "updateSlotSegment",
      "meta": "func",
      "title": "Auto-import from copy_gc",
      "description": "```source\nupdateSlotSegment(tag, size, first, last) → void\n```\nNo description available",
      "parameters": [
        "tag",
        "size",
        "first",
        "last"
      ]
    }
  },
  "curve": {
    "type_map": {
      "label": "type_map",
      "meta": "const",
      "title": "Auto-import from curve",
      "description": "#### type_map:Record<string, string>\nNo description available"
    },
    "animate_3D_curve": {
      "label": "animate_3D_curve",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nanimate_3D_curve(duration, fps, drawer, func) → AnimatedCurve\n```\nCreate a animation of curves using a curve generating function.",
      "parameters": [
        "duration",
        "fps",
        "drawer",
        "func"
      ]
    },
    "animate_curve": {
      "label": "animate_curve",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nanimate_curve(duration, fps, drawer, func) → AnimatedCurve\n```\nCreate a animation of curves using a curve generating function.",
      "parameters": [
        "duration",
        "fps",
        "drawer",
        "func"
      ]
    },
    "arc": {
      "label": "arc",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\narc(t) → Point\n```\nThis function is a curve: a function from a fraction t to a point. The points lie on the right half of the unit circle. They start at Point (0,1) when t is\n\n0.  When t is 0.5, they reach Point (1,0), when t is 1, they reach Point (0, -1).",
      "parameters": [
        "t"
      ]
    },
    "b_of": {
      "label": "b_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nb_of(pt) → number\n```\nRetrieves the blue component of a given Point.",
      "parameters": [
        "pt"
      ]
    },
    "connect_ends": {
      "label": "connect_ends",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nconnect_ends(curve1, curve2) → Curve\n```\nThis function is a binary Curve operator: It takes two Curves as arguments and returns a new Curve. The two Curves are combined by using the full first Curve for the first portion of the result and by using the full second Curve for the second portion of the result. The second Curve is translated such that its point at fraction 0 is the same as the Point of the first Curve at fraction 1.",
      "parameters": [
        "curve1",
        "curve2"
      ]
    },
    "connect_rigidly": {
      "label": "connect_rigidly",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nconnect_rigidly(curve1, curve2) → Curve\n```\nThis function is a binary Curve operator: It takes two Curves as arguments and returns a new Curve. The two Curves are combined by using the full first Curve for the first portion of the result and by using the full second Curve for the second portion of the result. The second Curve is not changed, and therefore there might be a big jump in the middle of the result Curve.",
      "parameters": [
        "curve1",
        "curve2"
      ]
    },
    "draw_3D_connected": {
      "label": "draw_3D_connected",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_connected(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points and connecting each pair with a line. The parts between (0,0,0) and (1,1,1) of the resulting Drawing are shown within the unit cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_3D_connected_full_view": {
      "label": "draw_3D_connected_full_view",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_connected_full_view(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points and connecting each pair with a line. The Drawing is translated and stretched/shrunk to show the full curve and maximize its width and height within the cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_3D_connected_full_view_proportional": {
      "label": "draw_3D_connected_full_view_proportional",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_connected_full_view_proportional(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points and connecting each pair with a line. The Drawing is translated and scaled proportionally with its size maximized to fit entirely inside the cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_3D_points": {
      "label": "draw_3D_points",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_points(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The parts between (0,0,0) and (1,1,1) of the resulting Drawing are shown within the unit cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_3D_points_full_view": {
      "label": "draw_3D_points_full_view",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_points_full_view(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The Drawing is translated and stretched/shrunk to maximize its size to fit entirely inside the cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_3D_points_full_view_proportional": {
      "label": "draw_3D_points_full_view_proportional",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_3D_points_full_view_proportional(numPoints) → RenderFunction\n```\nReturns a function that turns a given 3D Curve into a Drawing, by sampling the 3D Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The Drawing is translated and scaled proportionally with its size maximized to fit entirely inside the cube.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_connected": {
      "label": "draw_connected",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_connected(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points and connecting each pair with a line. The parts between (0,0) and (1,1) of the resulting Drawing are shown in the window.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_connected_full_view": {
      "label": "draw_connected_full_view",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_connected_full_view(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points and connecting each pair with a line. The Drawing is translated and stretched/shrunk to show the full curve and maximize its width and height, with some padding.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_connected_full_view_proportional": {
      "label": "draw_connected_full_view_proportional",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_connected_full_view_proportional(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points and connecting each pair with a line. The Drawing is translated and scaled proportionally to show the full curve and maximize its size, with some padding.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_points": {
      "label": "draw_points",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_points(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The parts between (0,0) and (1,1) of the resulting Drawing are shown in the window.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_points_full_view": {
      "label": "draw_points_full_view",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_points_full_view(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The Drawing is translated and stretched/shrunk to show the full curve and maximize its width and height, with some padding.",
      "parameters": [
        "numPoints"
      ]
    },
    "draw_points_full_view_proportional": {
      "label": "draw_points_full_view_proportional",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ndraw_points_full_view_proportional(numPoints) → RenderFunction\n```\nReturns a function that turns a given Curve into a Drawing, by sampling the Curve at `num` sample points. The Drawing consists of isolated points, and does not connect them. The Drawing is translated and scaled proportionally with its size maximized to fit entirely inside the window, with some padding.",
      "parameters": [
        "numPoints"
      ]
    },
    "g_of": {
      "label": "g_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ng_of(pt) → number\n```\nRetrieves the green component of a given Point.",
      "parameters": [
        "pt"
      ]
    },
    "invert": {
      "label": "invert",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ninvert(curve) → Curve\n```\nThis function is a Curve transformation: a function from a Curve to a Curve. The points of the result Curve are the same points as the points of the original Curve, but in reverse: The result Curve applied to 0 is the original Curve applied to 1 and vice versa.",
      "parameters": [
        "curve"
      ]
    },
    "make_3D_color_point": {
      "label": "make_3D_color_point",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nmake_3D_color_point(x, y, z, r, g, b) → Point\n```\nMakes a 3D color Point with given x, y and z coordinates, and RGB values ranging from 0 to 255. Any input lower than 0 for RGB will be rounded up to 0, and any input higher than 255 will be rounded down to 255.",
      "parameters": [
        "x",
        "y",
        "z",
        "r",
        "g",
        "b"
      ]
    },
    "make_3D_point": {
      "label": "make_3D_point",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nmake_3D_point(x, y, z) → Point\n```\nMakes a 3D Point with given x, y and z coordinates.",
      "parameters": [
        "x",
        "y",
        "z"
      ]
    },
    "make_color_point": {
      "label": "make_color_point",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nmake_color_point(x, y, r, g, b) → Point\n```\nMakes a color Point with given x and y coordinates, and RGB values ranging from 0 to 255. Any input lower than 0 for RGB will be rounded up to 0, and any input higher than 255 will be rounded down to 255.",
      "parameters": [
        "x",
        "y",
        "r",
        "g",
        "b"
      ]
    },
    "make_point": {
      "label": "make_point",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nmake_point(x, y) → Point\n```\nMakes a Point with given x and y coordinates.",
      "parameters": [
        "x",
        "y"
      ]
    },
    "put_in_standard_position": {
      "label": "put_in_standard_position",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nput_in_standard_position(curve) → Curve\n```\nThis function is a Curve transformation: It takes a Curve as argument and returns a new Curve, as follows. A Curve is in standard position if it starts at (0,0) ends at (1,0). This function puts the given Curve in standard position by rigidly translating it so its start Point is at the origin (0,0), then rotating it about the origin to put its endpoint on the x axis, then scaling it to put the endpoint at (1,0). Behavior is unspecified on closed Curves where start-point equal end-point.",
      "parameters": [
        "curve"
      ]
    },
    "r_of": {
      "label": "r_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nr_of(pt) → number\n```\nRetrieves the red component of a given Point.",
      "parameters": [
        "pt"
      ]
    },
    "rotate_around_origin": {
      "label": "rotate_around_origin",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nrotate_around_origin(theta1, theta2, theta3) → CurveTransformer\n```\nThis function takes 3 angles, a, b and c in radians as parameter and returns a Curve transformation: a function that takes a Curve as argument and returns a new Curve, which is the original Curve rotated extrinsically with Euler angles (a, b, c) about x, y, and z axes.",
      "parameters": [
        "theta1",
        "theta2",
        "theta3"
      ]
    },
    "scale": {
      "label": "scale",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nscale(a, b, c) → CurveTransformer\n```\nThis function takes scaling factors `a`, `b` and `c`, as arguments and returns a Curve transformation that scales a given Curve by `a` in x-direction, `b` in y-direction and `c` in z-direction.",
      "parameters": [
        "a",
        "b",
        "c"
      ]
    },
    "scale_proportional": {
      "label": "scale_proportional",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nscale_proportional(s) → CurveTransformer\n```\nThis function takes a scaling factor s argument and returns a Curve transformation that scales a given Curve by s in x, y and z direction.",
      "parameters": [
        "s"
      ]
    },
    "translate": {
      "label": "translate",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ntranslate(x0, y0, z0) → CurveTransformer\n```\nThis function returns a Curve transformation: It takes an x-value x0, a y-value y0 and a z-value z0, as arguments and returns a Curve transformation that takes a Curve as argument and returns a new Curve, by translating the original by x0 in x-direction, y0 in y-direction and z0 in z-direction.",
      "parameters": [
        "x0",
        "y0",
        "z0"
      ]
    },
    "unit_circle": {
      "label": "unit_circle",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nunit_circle(t) → Point\n```\nThis function is a curve: a function from a fraction t to a point. The points lie on the unit circle. They start at Point (1,0) when t is 0. When t is 0.25, they reach Point (0,1), when t is 0.5, they reach Point (-1, 0), etc.",
      "parameters": [
        "t"
      ]
    },
    "unit_line": {
      "label": "unit_line",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nunit_line(t) → Point\n```\nThis function is a curve: a function from a fraction t to a point. The x-coordinate at fraction t is t, and the y-coordinate is 0.",
      "parameters": [
        "t"
      ]
    },
    "unit_line_at": {
      "label": "unit_line_at",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nunit_line_at(t) → Curve\n```\nThis function is a Curve generator: it takes a number and returns a horizontal curve. The number is a y-coordinate, and the Curve generates only points with the given y-coordinate.",
      "parameters": [
        "t"
      ]
    },
    "x_of": {
      "label": "x_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nx_of(pt) → number\n```\nRetrieves the x-coordinate of a given Point.",
      "parameters": [
        "pt"
      ]
    },
    "y_of": {
      "label": "y_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\ny_of(pt) → number\n```\nRetrieves the y-coordinate of a given Point.",
      "parameters": [
        "pt"
      ]
    },
    "z_of": {
      "label": "z_of",
      "meta": "func",
      "title": "Auto-import from curve",
      "description": "```source\nz_of(pt) → number\n```\nRetrieves the z-coordinate of a given Point.",
      "parameters": [
        "pt"
      ]
    }
  },
  "mark_sweep": {
    "addRoots": {
      "label": "addRoots",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\naddRoots(arr) → void\n```\nNo description available",
      "parameters": [
        "arr"
      ]
    },
    "allHeap": {
      "label": "allHeap",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nallHeap(newHeap) → void\n```\nNo description available",
      "parameters": [
        "newHeap"
      ]
    },
    "endGC": {
      "label": "endGC",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nendGC(heap) → void\n```\nNo description available",
      "parameters": [
        "heap"
      ]
    },
    "generateMemory": {
      "label": "generateMemory",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\ngenerateMemory() → void\n```\nNo description available",
      "parameters": []
    },
    "init": {
      "label": "init",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\ninit() → Object\n```\nNo description available",
      "parameters": []
    },
    "initialize_memory": {
      "label": "initialize_memory",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\ninitialize_memory(memorySize, nodeSize, marked, unmarked) → void\n```\nNo description available",
      "parameters": [
        "memorySize",
        "nodeSize",
        "marked",
        "unmarked"
      ]
    },
    "initialize_tag": {
      "label": "initialize_tag",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\ninitialize_tag(allTag, types) → void\n```\nNo description available",
      "parameters": [
        "allTag",
        "types"
      ]
    },
    "newAssign": {
      "label": "newAssign",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewAssign(res, left, heap) → void\n```\nNo description available",
      "parameters": [
        "res",
        "left",
        "heap"
      ]
    },
    "newCommand": {
      "label": "newCommand",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewCommand(type, left, right, sizeLeft, sizeRight, heap, description, firstDesc, lastDesc, queue) → void\n```\nNo description available",
      "parameters": [
        "type",
        "left",
        "right",
        "sizeLeft",
        "sizeRight",
        "heap",
        "description",
        "firstDesc",
        "lastDesc",
        "queue"
      ]
    },
    "newGC": {
      "label": "newGC",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewGC(heap) → void\n```\nNo description available",
      "parameters": [
        "heap"
      ]
    },
    "newMark": {
      "label": "newMark",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewMark(left, heap, queue) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap",
        "queue"
      ]
    },
    "newNew": {
      "label": "newNew",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewNew(left, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap"
      ]
    },
    "newPop": {
      "label": "newPop",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewPop(res, left, right, heap) → void\n```\nNo description available",
      "parameters": [
        "res",
        "left",
        "right",
        "heap"
      ]
    },
    "newPush": {
      "label": "newPush",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewPush(left, right, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "right",
        "heap"
      ]
    },
    "newSweep": {
      "label": "newSweep",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewSweep(left, heap) → void\n```\nNo description available",
      "parameters": [
        "left",
        "heap"
      ]
    },
    "newUpdateSweep": {
      "label": "newUpdateSweep",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nnewUpdateSweep(right, heap) → void\n```\nNo description available",
      "parameters": [
        "right",
        "heap"
      ]
    },
    "showRoot": {
      "label": "showRoot",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nshowRoot(heap) → void\n```\nNo description available",
      "parameters": [
        "heap"
      ]
    },
    "showRoots": {
      "label": "showRoots",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nshowRoots(heap) → void\n```\nNo description available",
      "parameters": [
        "heap"
      ]
    },
    "updateRoots": {
      "label": "updateRoots",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nupdateRoots(array) → void\n```\nNo description available",
      "parameters": [
        "array"
      ]
    },
    "updateSlotSegment": {
      "label": "updateSlotSegment",
      "meta": "func",
      "title": "Auto-import from mark_sweep",
      "description": "```source\nupdateSlotSegment(tag, size, first, last) → void\n```\nNo description available",
      "parameters": [
        "tag",
        "size",
        "first",
        "last"
      ]
    }
  },
  "sound": {
    "adsr": {
      "label": "adsr",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nadsr(attack_ratio, decay_ratio, sustain_level, release_ratio) → SoundTransformer\n```\nReturns an envelope: a function from Sound to Sound. When the adsr envelope is applied to a Sound, it returns a new Sound with its amplitude modified according to parameters The relative amplitude increases from 0 to 1 linearly over the attack proportion, then decreases from 1 to sustain level over the decay proportion, and remains at that level until the release proportion when it decays back to 0.",
      "parameters": [
        "attack_ratio",
        "decay_ratio",
        "sustain_level",
        "release_ratio"
      ]
    },
    "bell": {
      "label": "bell",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nbell(note, duration) → Sound\n```\nreturns a Sound reminiscent of a bell, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "cello": {
      "label": "cello",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\ncello(note, duration) → Sound\n```\nreturns a Sound reminiscent of a cello, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "consecutively": {
      "label": "consecutively",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nconsecutively(list_of_sounds) → Sound\n```\nMakes a new Sound by combining the sounds in a given list where the second Sound is appended to the end of the first Sound, the third Sound is appended to the end of the second Sound, and so on. The effect is that the Sounds in the list are joined end-to-end",
      "parameters": [
        "list_of_sounds"
      ]
    },
    "get_duration": {
      "label": "get_duration",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nget_duration(sound) → number\n```\nAccesses the duration of a given Sound.",
      "parameters": [
        "sound"
      ]
    },
    "get_wave": {
      "label": "get_wave",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nget_wave(sound) → Wave\n```\nAccesses the wave function of a given Sound.",
      "parameters": [
        "sound"
      ]
    },
    "init_record": {
      "label": "init_record",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\ninit_record() → string\n```\nInitialize recording by obtaining permission to use the default device microphone",
      "parameters": []
    },
    "is_sound": {
      "label": "is_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nis_sound(x) → x is Sound\n```\nChecks if the argument is a Sound",
      "parameters": [
        "x"
      ]
    },
    "letter_name_to_frequency": {
      "label": "letter_name_to_frequency",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nletter_name_to_frequency(note) → number\n```\nConverts a letter name to its corresponding frequency.",
      "parameters": [
        "note"
      ]
    },
    "letter_name_to_midi_note": {
      "label": "letter_name_to_midi_note",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nletter_name_to_midi_note(note) → number\n```\nConverts a letter name to its corresponding MIDI note. The letter name is represented in standard pitch notation. Examples are \"A5\", \"Db3\", \"C#7\". Refer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from letter name to midi notes.",
      "parameters": [
        "note"
      ]
    },
    "make_sound": {
      "label": "make_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nmake_sound(wave, duration) → Sound\n```\nMakes a Sound with given wave function and duration. The wave function is a function: number -> number that takes in a non-negative input time and returns an amplitude between -1 and 1.",
      "parameters": [
        "wave",
        "duration"
      ]
    },
    "midi_note_to_frequency": {
      "label": "midi_note_to_frequency",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nmidi_note_to_frequency(note) → number\n```\nConverts a MIDI note to its corresponding frequency.",
      "parameters": [
        "note"
      ]
    },
    "noise_sound": {
      "label": "noise_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nnoise_sound(duration) → Sound\n```\nMakes a noise Sound with given duration",
      "parameters": [
        "duration"
      ]
    },
    "phase_mod": {
      "label": "phase_mod",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nphase_mod(freq, duration, amount) → SoundTransformer\n```\nReturns a Sound transformer which uses its argument to modulate the phase of a (carrier) sine wave of given frequency and duration with a given Sound. Modulating with a low frequency Sound results in a vibrato effect. Modulating with a Sound with frequencies comparable to the sine wave frequency results in more complex wave forms.",
      "parameters": [
        "freq",
        "duration",
        "amount"
      ]
    },
    "piano": {
      "label": "piano",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\npiano(note, duration) → Sound\n```\nreturns a Sound reminiscent of a piano, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "play": {
      "label": "play",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nplay(sound) → Sound\n```\nPlays the given Sound using the computer’s sound device on top of any Sounds that are currently playing.",
      "parameters": [
        "sound"
      ]
    },
    "play_in_tab": {
      "label": "play_in_tab",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nplay_in_tab(sound) → Sound\n```\nPlays the given Sound using the computer’s sound device. The sound is added to a list of sounds to be played one-at-a-time in a Source Academy tab.",
      "parameters": [
        "sound"
      ]
    },
    "play_wave": {
      "label": "play_wave",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nplay_wave(wave, duration) → Sound\n```\nPlays the given Wave using the computer’s sound device, for the duration given in seconds.",
      "parameters": [
        "wave",
        "duration"
      ]
    },
    "record": {
      "label": "record",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nrecord(buffer) → Function\n```\nRecords a sound until the returned stop function is called. Takes a <CODE>buffer</CODE> duration (in seconds) as argument, and returns a nullary stop function <CODE>stop</CODE>. A call <CODE>stop()</CODE> returns a Sound promise: a nullary function that returns a Sound. Example: <PRE><CODE>init\\_record(); const stop = record(0.5); // record after 0.5 seconds. Then in next query: const promise = stop(); // In next query, you can play the promised sound, by // applying the promise: play(promise());</CODE></PRE>",
      "parameters": [
        "buffer"
      ]
    },
    "record_for": {
      "label": "record_for",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nrecord_for(duration, buffer) → Function\n```\nRecords a sound of given <CODE>duration</CODE> in seconds, after a <CODE>buffer</CODE> also in seconds, and returns a Sound promise: a nullary function that returns a Sound. Example: <PRE><CODE>init\\_record(); const promise = record\\_for(2, 0.5); // In next query, you can play the promised Sound, by // applying the promise: play(promise());</CODE></PRE>",
      "parameters": [
        "duration",
        "buffer"
      ]
    },
    "sawtooth_sound": {
      "label": "sawtooth_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nsawtooth_sound(freq, duration) → Sound\n```\nMakes a sawtooth wave Sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "silence_sound": {
      "label": "silence_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nsilence_sound(duration) → Sound\n```\nMakes a silence Sound with given duration",
      "parameters": [
        "duration"
      ]
    },
    "simultaneously": {
      "label": "simultaneously",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nsimultaneously(list_of_sounds) → Sound\n```\nMakes a new Sound by combining the Sounds in a given list. In the result sound, the component sounds overlap such that they start at the beginning of the result sound. To achieve this, the amplitudes of the component sounds are added together and then divided by the length of the list.",
      "parameters": [
        "list_of_sounds"
      ]
    },
    "sine_sound": {
      "label": "sine_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nsine_sound(freq, duration) → Sound\n```\nMakes a sine wave Sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "square_sound": {
      "label": "square_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nsquare_sound(f, duration) → Sound\n```\nMakes a square wave Sound with given frequency and duration",
      "parameters": [
        "f",
        "duration"
      ]
    },
    "stacking_adsr": {
      "label": "stacking_adsr",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nstacking_adsr(waveform, base_frequency, duration, envelopes) → Sound\n```\nReturns a Sound that results from applying a list of envelopes to a given wave form. The wave form is a Sound generator that takes a frequency and a duration as arguments and produces a Sound with the given frequency and duration. Each envelope is applied to a harmonic: the first harmonic has the given frequency, the second has twice the frequency, the third three times the frequency etc. The harmonics are then layered simultaneously to produce the resulting Sound.",
      "parameters": [
        "waveform",
        "base_frequency",
        "duration",
        "envelopes"
      ]
    },
    "stop": {
      "label": "stop",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nstop() → void\n```\nStops all currently playing sounds.",
      "parameters": []
    },
    "triangle_sound": {
      "label": "triangle_sound",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\ntriangle_sound(freq, duration) → Sound\n```\nMakes a triangle wave Sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "trombone": {
      "label": "trombone",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\ntrombone(note, duration) → Sound\n```\nreturns a Sound reminiscent of a trombone, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "violin": {
      "label": "violin",
      "meta": "func",
      "title": "Auto-import from sound",
      "description": "```source\nviolin(note, duration) → Sound\n```\nreturns a Sound reminiscent of a violin, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    }
  },
  "scrabble": {
    "scrabble_letters": {
      "label": "scrabble_letters",
      "meta": "const",
      "title": "Auto-import from scrabble",
      "description": "#### scrabble_letters:string[][]\n`scrabble_letters` is an array of arrays of strings. Each array of strings represents an allowed word in Scrabble and contains the letters of that word as single-character strings in the order in which the letters appear in the word."
    },
    "scrabble_letters_tiny": {
      "label": "scrabble_letters_tiny",
      "meta": "const",
      "title": "Auto-import from scrabble",
      "description": "#### scrabble_letters_tiny:string[][]\nNo description available"
    },
    "scrabble_words": {
      "label": "scrabble_words",
      "meta": "const",
      "title": "Auto-import from scrabble",
      "description": "#### scrabble_words:string[]\n`scrabble_words` is an array of strings, each representing an allowed word in Scrabble."
    },
    "scrabble_words_tiny": {
      "label": "scrabble_words_tiny",
      "meta": "const",
      "title": "Auto-import from scrabble",
      "description": "#### scrabble_words_tiny:string[]\nNo description available"
    }
  },
  "stereo_sound": {
    "adsr": {
      "label": "adsr",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nadsr(attack_ratio, decay_ratio, sustain_level, release_ratio) → SoundTransformer\n```\nReturns an envelope: a function from Sound to Sound. When the adsr envelope is applied to a Sound, it returns a new Sound with its amplitude modified according to parameters The relative amplitude increases from 0 to 1 linearly over the attack proportion, then decreases from 1 to sustain level over the decay proportion, and remains at that level until the release proportion when it decays back to 0.",
      "parameters": [
        "attack_ratio",
        "decay_ratio",
        "sustain_level",
        "release_ratio"
      ]
    },
    "bell": {
      "label": "bell",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nbell(note, duration) → Sound\n```\nreturns a Sound reminiscent of a bell, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "cello": {
      "label": "cello",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\ncello(note, duration) → Sound\n```\nreturns a Sound reminiscent of a cello, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "consecutively": {
      "label": "consecutively",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nconsecutively(list_of_sounds) → Sound\n```\nMakes a new Sound by combining the sounds in a given list where the second sound is appended to the end of the first sound, the third sound is appended to the end of the second sound, and so on. The effect is that the sounds in the list are joined end-to-end",
      "parameters": [
        "list_of_sounds"
      ]
    },
    "get_duration": {
      "label": "get_duration",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nget_duration(sound) → number\n```\nAccesses the duration of a given Sound.",
      "parameters": [
        "sound"
      ]
    },
    "get_left_wave": {
      "label": "get_left_wave",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nget_left_wave(sound) → Wave\n```\nAccesses the left wave function of a given Sound.",
      "parameters": [
        "sound"
      ]
    },
    "get_right_wave": {
      "label": "get_right_wave",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nget_right_wave(sound) → Wave\n```\nAccesses the left wave function of a given Sound.",
      "parameters": [
        "sound"
      ]
    },
    "init_record": {
      "label": "init_record",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\ninit_record() → string\n```\nInitialize recording by obtaining permission to use the default device microphone",
      "parameters": []
    },
    "is_sound": {
      "label": "is_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nis_sound(x) → boolean\n```\nChecks if the argument is a Sound",
      "parameters": [
        "x"
      ]
    },
    "letter_name_to_frequency": {
      "label": "letter_name_to_frequency",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nletter_name_to_frequency(note) → number\n```\nConverts a letter name to its corresponding frequency.",
      "parameters": [
        "note"
      ]
    },
    "letter_name_to_midi_note": {
      "label": "letter_name_to_midi_note",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nletter_name_to_midi_note(note) → number\n```\nConverts a letter name to its corresponding MIDI note. The letter name is represented in standard pitch notation. Examples are \"A5\", \"Db3\", \"C#7\". Refer to <a href=\"https://i.imgur.com/qGQgmYr.png\">this mapping from letter name to midi notes.",
      "parameters": [
        "note"
      ]
    },
    "make_sound": {
      "label": "make_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nmake_sound(wave, duration) → Sound\n```\nMakes a Sound with given wave function and duration. The wave function is a function: number -> number that takes in a non-negative input time and returns an amplitude between -1 and 1.",
      "parameters": [
        "wave",
        "duration"
      ]
    },
    "make_stereo_sound": {
      "label": "make_stereo_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nmake_stereo_sound(left_wave, right_wave, duration) → Sound\n```\nMakes a Stereo Sound with given wave function and duration. The wave function is a function: number -> number that takes in a non-negative input time and returns an amplitude between -1 and 1.",
      "parameters": [
        "left_wave",
        "right_wave",
        "duration"
      ]
    },
    "midi_note_to_frequency": {
      "label": "midi_note_to_frequency",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nmidi_note_to_frequency(note) → number\n```\nConverts a MIDI note to its corresponding frequency.",
      "parameters": [
        "note"
      ]
    },
    "noise_sound": {
      "label": "noise_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nnoise_sound(duration) → Sound\n```\nMakes a noise sound with given duration",
      "parameters": [
        "duration"
      ]
    },
    "pan": {
      "label": "pan",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\npan(amount) → SoundTransformer\n```\nReturns a Sound Transformer that pans a sound based on the pan amount. The input sound is first squashed to mono. An amount of `-1` is a hard left pan, `0` is balanced, `1` is hard right pan.",
      "parameters": [
        "amount"
      ]
    },
    "pan_mod": {
      "label": "pan_mod",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\npan_mod(modulator) → SoundTransformer\n```\nReturns a Sound Transformer that uses a Sound to pan another Sound. The modulator is treated as a mono sound and its output is used to pan an input Sound. `-1` is a hard left pan, `0` is balanced, `1` is hard right pan.",
      "parameters": [
        "modulator"
      ]
    },
    "phase_mod": {
      "label": "phase_mod",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nphase_mod(freq, duration, amount) → SoundTransformer\n```\nReturns a SoundTransformer which uses its argument to modulate the phase of a (carrier) sine wave of given frequency and duration with a given Sound. Modulating with a low frequency Sound results in a vibrato effect. Modulating with a Sound with frequencies comparable to the sine wave frequency results in more complex wave forms.",
      "parameters": [
        "freq",
        "duration",
        "amount"
      ]
    },
    "piano": {
      "label": "piano",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\npiano(note, duration) → Sound\n```\nreturns a Sound reminiscent of a piano, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "play": {
      "label": "play",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nplay(sound) → Sound\n```\nPlays the given Sound using the computer’s sound device on top of any Sounds that are currently playing.",
      "parameters": [
        "sound"
      ]
    },
    "play_in_tab": {
      "label": "play_in_tab",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nplay_in_tab(sound) → Sound\n```\nPlays the given Sound using the computer’s sound device. The Sound is added to a list of Sounds to be played one-at-a-time in a Source Academy tab.",
      "parameters": [
        "sound"
      ]
    },
    "play_wave": {
      "label": "play_wave",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nplay_wave(wave, duration) → Sound\n```\nPlays the given Wave using the computer’s sound device, for the duration given in seconds.",
      "parameters": [
        "wave",
        "duration"
      ]
    },
    "play_waves": {
      "label": "play_waves",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nplay_waves(wave1, wave2, duration) → Sound\n```\nPlays the given two Waves using the computer’s sound device, for the duration given in seconds. The first Wave is for the left channel, the second for the right channel.",
      "parameters": [
        "wave1",
        "wave2",
        "duration"
      ]
    },
    "record": {
      "label": "record",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nrecord(buffer) → Function\n```\nRecords a sound until the returned stop function is called. Takes a <CODE>buffer</CODE> duration (in seconds) as argument, and returns a nullary stop function <CODE>stop</CODE>. A call <CODE>stop()</CODE> returns a Sound promise: a nullary function that returns a Sound. Example: <PRE><CODE>init\\_record(); const stop = record(0.5); // record after 0.5 seconds. Then in next query: const promise = stop(); // In next query, you can play the promised Sound, by // applying the promise: play(promise());</CODE></PRE>",
      "parameters": [
        "buffer"
      ]
    },
    "record_for": {
      "label": "record_for",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nrecord_for(duration, buffer) → Function\n```\nRecords a sound of given <CODE>duration</CODE> in seconds, after a <CODE>buffer</CODE> also in seconds, and returns a Sound promise: a nullary function that returns a Sound. Example: <PRE><CODE>init\\_record(); const promise = record\\_for(2, 0.5); // In next query, you can play the promised sound, by // applying the promise: play(promise());</CODE></PRE>",
      "parameters": [
        "duration",
        "buffer"
      ]
    },
    "sawtooth_sound": {
      "label": "sawtooth_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsawtooth_sound(freq, duration) → Sound\n```\nMakes a sawtooth wave sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "silence_sound": {
      "label": "silence_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsilence_sound(duration) → Sound\n```\nMakes a silence sound with given duration",
      "parameters": [
        "duration"
      ]
    },
    "simultaneously": {
      "label": "simultaneously",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsimultaneously(list_of_sounds) → Sound\n```\nMakes a new Sound by combining the sounds in a given list. In the result sound, the component sounds overlap such that they start at the beginning of the result sound. To achieve this, the amplitudes of the component sounds are added together and then divided by the length of the list.",
      "parameters": [
        "list_of_sounds"
      ]
    },
    "sine_sound": {
      "label": "sine_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsine_sound(freq, duration) → Sound\n```\nMakes a sine wave sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "square_sound": {
      "label": "square_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsquare_sound(f, duration) → Sound\n```\nMakes a square wave sound with given frequency and duration",
      "parameters": [
        "f",
        "duration"
      ]
    },
    "squash": {
      "label": "squash",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nsquash(sound) → Sound\n```\nCenters a Sound by averaging its left and right channels, resulting in an effectively mono sound.",
      "parameters": [
        "sound"
      ]
    },
    "stacking_adsr": {
      "label": "stacking_adsr",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nstacking_adsr(waveform, base_frequency, duration, envelopes) → Sound\n```\nReturns a Sound that results from applying a list of envelopes to a given wave form. The wave form is a Sound generator that takes a frequency and a duration as arguments and produces a Sound with the given frequency and duration. Each envelope is applied to a harmonic: the first harmonic has the given frequency, the second has twice the frequency, the third three times the frequency etc. The harmonics are then layered simultaneously to produce the resulting Sound.",
      "parameters": [
        "waveform",
        "base_frequency",
        "duration",
        "envelopes"
      ]
    },
    "stop": {
      "label": "stop",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nstop() → void\n```\nStops all currently playing sounds.",
      "parameters": []
    },
    "triangle_sound": {
      "label": "triangle_sound",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\ntriangle_sound(freq, duration) → Sound\n```\nMakes a triangle wave sound with given frequency and duration",
      "parameters": [
        "freq",
        "duration"
      ]
    },
    "trombone": {
      "label": "trombone",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\ntrombone(note, duration) → Sound\n```\nreturns a Sound reminiscent of a trombone, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    },
    "violin": {
      "label": "violin",
      "meta": "func",
      "title": "Auto-import from stereo_sound",
      "description": "```source\nviolin(note, duration) → Sound\n```\nreturns a Sound reminiscent of a violin, playing a given note for a given duration",
      "parameters": [
        "note",
        "duration"
      ]
    }
  },
  "game": {
    "add": {
      "label": "add",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nadd(obj) → GameObject | undefined\n```\nAdd the object to the scene. Only objects added to the scene will appear.",
      "parameters": [
        "obj"
      ]
    },
    "add_keyboard_listener": {
      "label": "add_keyboard_listener",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nadd_keyboard_listener(key, event, callback) → GameObject\n```\nAttach a listener to the object. The callback will be executed when the event is emitted. Mutate the object.\n\nFor all available events, see: https://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html\n\nFor list of keycodes, see: https://github.com/photonstorm/phaser/blob/v3.22.0/src/input/keyboard/keys/KeyCodes.js",
      "parameters": [
        "key",
        "event",
        "callback"
      ]
    },
    "add_listener": {
      "label": "add_listener",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nadd_listener(obj, event, callback) → GameObject | undefined\n```\nAttach a listener to the object. The callback will be executed when the event is emitted. Mutate the object.\n\nFor all available events, see: https://photonstorm.github.io/phaser3-docs/Phaser.Input.Events.html",
      "parameters": [
        "obj",
        "event",
        "callback"
      ]
    },
    "add_to_container": {
      "label": "add_to_container",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nadd_to_container(container, obj) → GameObject | undefined\n```\nAdd the given game object to the container. Mutates the container.",
      "parameters": [
        "container",
        "obj"
      ]
    },
    "add_tween": {
      "label": "add_tween",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nadd_tween(obj, config) → Promise<GameObject | undefined>\n```\nCreates a tween to the object and plays it. Mutate the object.",
      "parameters": [
        "obj",
        "config"
      ]
    },
    "create_anim": {
      "label": "create_anim",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_anim(anim_config) → boolean\n```\nCreate a new animation and add it to the available animations. Animations are global i.e. once created, it can be used anytime, anywhere.\n\nNOTE: Anims DO NOT need to be added into the scene to be used. It is automatically added to the scene when it is created.\n\nWill return true if the animation key is valid (key is specified within the anim\\_config); false if the key is already in use.",
      "parameters": [
        "anim_config"
      ]
    },
    "create_anim_config": {
      "label": "create_anim_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_anim_config(anims_key, anim_frames, frame_rate, duration, repeat, yoyo, show_on_start, hide_on_complete) → ObjectConfig\n```\nCreate anims config, can be used to configure anims\n\nFor more details about the config object, see: https://photonstorm.github.io/phaser3-docs/Phaser.Types.Animations.html#.Animation",
      "parameters": [
        "anims_key",
        "anim_frames",
        "frame_rate",
        "duration",
        "repeat",
        "yoyo",
        "show_on_start",
        "hide_on_complete"
      ]
    },
    "create_anim_frame_config": {
      "label": "create_anim_frame_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_anim_frame_config(key, duration, visible) → ObjectConfig\n```\nCreate animation frame config, can be used to configure a specific frame within an animation.\n\nThe key should refer to an image that is already loaded. To make frame\\_config from spritesheet based on its frames, use create\\_anim\\_spritesheet\\_frame\\_configs instead.",
      "parameters": [
        "key",
        "duration",
        "visible"
      ]
    },
    "create_anim_spritesheet_frame_configs": {
      "label": "create_anim_spritesheet_frame_configs",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_anim_spritesheet_frame_configs(key) → ObjectConfig[] | undefined\n```\nCreate list of animation frame config, can be used directly as part of anim\\_config's `frames` parameter.\n\nThis function will generate list of frame configs based on the spritesheet\\_config attached to the associated spritesheet. This function requires that the given key is a spritesheet key i.e. a key associated with loaded spritesheet, loaded in using load\\_spritesheet function.\n\nWill return empty frame configs if key is not associated with a spritesheet.",
      "parameters": [
        "key"
      ]
    },
    "create_award": {
      "label": "create_award",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_award(x, y, award_key) → GameObject\n```\nCreate an award using the key associated with the award. The award key can be obtained from the Awards Hall or Awards menu, after attaining the award.\n\nValid award will have an on-hover VERIFIED tag to distinguish it from images created by create\\_image.\n\nIf student does not possess the award, this function will return a untagged, default image.",
      "parameters": [
        "x",
        "y",
        "award_key"
      ]
    },
    "create_config": {
      "label": "create_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_config(lst) → ObjectConfig\n```\nTransforms the given list of pairs into an object config. The list follows the format of list(pair(key1, value1), pair(key2, value2), ...).\n\ne.g list(pair(\"alpha\", 0), pair(\"duration\", 1000))",
      "parameters": [
        "lst"
      ]
    },
    "create_container": {
      "label": "create_container",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_container(x, y) → GameObject\n```\nCreate a container object. Container is able to contain any other game object, and the positions of contained game object will be relative to the container.\n\nRendering the container as visible or invisible will also affect the contained game object.\n\nContainer can also contain another container.\n\n0, 0 is located at the top, left hand side.\n\nFor more details about container object, see: https://photonstorm.github.io/phaser3-docs/Phaser.GameObjects.Container.html",
      "parameters": [
        "x",
        "y"
      ]
    },
    "create_ellipse": {
      "label": "create_ellipse",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_ellipse(x, y, width, height, fill, alpha) → GameObject\n```\nCreate an ellipse object.",
      "parameters": [
        "x",
        "y",
        "width",
        "height",
        "fill",
        "alpha"
      ]
    },
    "create_image": {
      "label": "create_image",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_image(x, y, asset_key) → GameObject | undefined\n```\nCreate an image using the key associated with a loaded image. If key is not associated with any loaded image, throws error.\n\n0, 0 is located at the top, left hand side.",
      "parameters": [
        "x",
        "y",
        "asset_key"
      ]
    },
    "create_interactive_config": {
      "label": "create_interactive_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_interactive_config(draggable, use_hand_cursor, pixel_perfect, alpha_tolerance) → ObjectConfig\n```\nCreate interactive config object, can be used to configure interactive settings.\n\nFor more details about interactive config object, see: https://photonstorm.github.io/phaser3-docs/Phaser.Types.Input.html#.InputConfiguration",
      "parameters": [
        "draggable",
        "use_hand_cursor",
        "pixel_perfect",
        "alpha_tolerance"
      ]
    },
    "create_rect": {
      "label": "create_rect",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_rect(x, y, width, height, fill, alpha) → GameObject\n```\nCreate a rectangle object.\n\n0, 0 is located at the top, left hand side.",
      "parameters": [
        "x",
        "y",
        "width",
        "height",
        "fill",
        "alpha"
      ]
    },
    "create_sound_config": {
      "label": "create_sound_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_sound_config(mute, volume, rate, detune, seek, loop, delay) → ObjectConfig\n```\nCreate sound config object, can be used to configure sound settings.\n\nFor more details about sound config object, see: https://photonstorm.github.io/phaser3-docs/Phaser.Types.Sound.html#.SoundConfig",
      "parameters": [
        "mute",
        "volume",
        "rate",
        "detune",
        "seek",
        "loop",
        "delay"
      ]
    },
    "create_spritesheet_config": {
      "label": "create_spritesheet_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_spritesheet_config(frame_width, frame_height, start_frame, margin, spacing) → ObjectConfig\n```\nCreate spritesheet config, can be used to configure the frames within the spritesheet. Can be used as config at load\\_spritesheet.",
      "parameters": [
        "frame_width",
        "frame_height",
        "start_frame",
        "margin",
        "spacing"
      ]
    },
    "create_text": {
      "label": "create_text",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_text(x, y, text, config) → GameObject\n```\nCreate a text object.\n\n0, 0 is located at the top, left hand side.",
      "parameters": [
        "x",
        "y",
        "text",
        "config"
      ]
    },
    "create_text_config": {
      "label": "create_text_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_text_config(font_family, font_size, color, stroke, stroke_thickness, align) → ObjectConfig\n```\nCreate text config object, can be used to stylise text object.\n\nfont\\_family: for available font\\_family, see: https://developer.mozilla.org/en-US/docs/Web/CSS/font-family#Valid\\_family\\_names\n\nalign: must be either 'left', 'right', 'center', or 'justify'\n\nFor more details about text config, see: https://photonstorm.github.io/phaser3-docs/Phaser.Types.GameObjects.Text.html#.TextStyle",
      "parameters": [
        "font_family",
        "font_size",
        "color",
        "stroke",
        "stroke_thickness",
        "align"
      ]
    },
    "create_tween_config": {
      "label": "create_tween_config",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ncreate_tween_config(target_prop, target_value, delay, duration, ease, on_complete, yoyo, loop, loop_delay, on_loop) → ObjectConfig\n```\nCreate tween config object, can be used to configure tween settings.\n\nFor more details about tween config object, see: https://photonstorm.github.io/phaser3-docs/Phaser.Types.Tweens.html#.TweenBuilderConfig",
      "parameters": [
        "target_prop",
        "target_value",
        "delay",
        "duration",
        "ease",
        "on_complete",
        "yoyo",
        "loop",
        "loop_delay",
        "on_loop"
      ]
    },
    "destroy_obj": {
      "label": "destroy_obj",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\ndestroy_obj(obj) → void\n```\nDestroy the given game object. Destroyed game object is removed from the scene, and all of its listeners is also removed.",
      "parameters": [
        "obj"
      ]
    },
    "get_screen_display_height": {
      "label": "get_screen_display_height",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nget_screen_display_height() → number\n```\nGet game screen display height (accounting window size).",
      "parameters": []
    },
    "get_screen_display_width": {
      "label": "get_screen_display_width",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nget_screen_display_width() → number\n```\nGet game screen display width (accounting window size).",
      "parameters": []
    },
    "get_screen_height": {
      "label": "get_screen_height",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nget_screen_height() → number\n```\nGet in-game screen height.",
      "parameters": []
    },
    "get_screen_width": {
      "label": "get_screen_width",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nget_screen_width() → number\n```\nGet in-game screen width.",
      "parameters": []
    },
    "load_image": {
      "label": "load_image",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nload_image(key, url) → void\n```\nLoad the image asset into the scene for use. All images must be loaded before used in create\\_image.",
      "parameters": [
        "key",
        "url"
      ]
    },
    "load_sound": {
      "label": "load_sound",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nload_sound(key, url) → void\n```\nLoad the sound asset into the scene for use. All sound must be loaded before used in play\\_sound.",
      "parameters": [
        "key",
        "url"
      ]
    },
    "load_spritesheet": {
      "label": "load_spritesheet",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nload_spritesheet(key, url, spritesheet_config) → void\n```\nLoad the spritesheet into the scene for use. All spritesheet must be loaded before used in create\\_image.",
      "parameters": [
        "key",
        "url",
        "spritesheet_config"
      ]
    },
    "play_anim_on_image": {
      "label": "play_anim_on_image",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nplay_anim_on_image(image, anims_key) → GameObject | undefined\n```\nStart playing the given animation on image game object.",
      "parameters": [
        "image",
        "anims_key"
      ]
    },
    "play_sound": {
      "label": "play_sound",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nplay_sound(key, config) → void\n```\nPlay the sound associated with the key. Throws error if key is non-existent.",
      "parameters": [
        "key",
        "config"
      ]
    },
    "prepend_remote_url": {
      "label": "prepend_remote_url",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nprepend_remote_url(asset_key) → string\n```\nPrepend the given asset key with the remote path (S3 path).",
      "parameters": [
        "asset_key"
      ]
    },
    "remove_listener": {
      "label": "remove_listener",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nremove_listener(listener) → boolean\n```\nDeactivate and remove listener.",
      "parameters": [
        "listener"
      ]
    },
    "set_alpha": {
      "label": "set_alpha",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_alpha(obj, alpha) → GameObject | undefined\n```\nSet the alpha of the object. Mutate the object.",
      "parameters": [
        "obj",
        "alpha"
      ]
    },
    "set_display_size": {
      "label": "set_display_size",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_display_size(obj, x, y) → GameObject | undefined\n```\nSet the display size of the object. Mutate the object.",
      "parameters": [
        "obj",
        "x",
        "y"
      ]
    },
    "set_flip": {
      "label": "set_flip",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_flip(obj, x, y) → GameObject | undefined\n```\nSets the horizontal and flipped state of the object. Mutate the object.",
      "parameters": [
        "obj",
        "x",
        "y"
      ]
    },
    "set_interactive": {
      "label": "set_interactive",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_interactive(obj, config) → GameObject | undefined\n```\nSet the interactivity of the object. Mutate the object.\n\nRectangle and Ellipse are not able to receive configs, only boolean i.e. set\\_interactive(rect, true); set\\_interactive(ellipse, false)",
      "parameters": [
        "obj",
        "config"
      ]
    },
    "set_origin": {
      "label": "set_origin",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_origin(obj, x, y) → GameObject | undefined\n```\nSet the origin in which all position related will be relative to. In other words, the anchor of the object. Mutate the object.",
      "parameters": [
        "obj",
        "x",
        "y"
      ]
    },
    "set_position": {
      "label": "set_position",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_position(obj, x, y) → GameObject | undefined\n```\nSet the position of the game object Mutate the object",
      "parameters": [
        "obj",
        "x",
        "y"
      ]
    },
    "set_rotation": {
      "label": "set_rotation",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_rotation(obj, rad) → GameObject | undefined\n```\nSet the rotation of the object. Mutate the object.",
      "parameters": [
        "obj",
        "rad"
      ]
    },
    "set_scale": {
      "label": "set_scale",
      "meta": "func",
      "title": "Auto-import from game",
      "description": "```source\nset_scale(obj, x, y) → GameObject | undefined\n```\nSet the scale of the object. Mutate the object.",
      "parameters": [
        "obj",
        "x",
        "y"
      ]
    }
  },
  "rune": {
    "type_map": {
      "label": "type_map",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": ""
    },
    "blank": {
      "label": "blank",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### blank:Rune\nNo description available"
    },
    "circle": {
      "label": "circle",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### circle:Rune\nNo description available"
    },
    "corner": {
      "label": "corner",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### corner:Rune\nNo description available"
    },
    "heart": {
      "label": "heart",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### heart:Rune\nNo description available"
    },
    "nova": {
      "label": "nova",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### nova:Rune\nNo description available"
    },
    "pentagram": {
      "label": "pentagram",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### pentagram:Rune\nNo description available"
    },
    "rcross": {
      "label": "rcross",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### rcross:Rune\nNo description available"
    },
    "ribbon": {
      "label": "ribbon",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### ribbon:Rune\nNo description available"
    },
    "sail": {
      "label": "sail",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### sail:Rune\nNo description available"
    },
    "square": {
      "label": "square",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### square:Rune\nNo description available"
    },
    "triangle": {
      "label": "triangle",
      "meta": "const",
      "title": "Auto-import from rune",
      "description": "#### triangle:Rune\nNo description available"
    },
    "anaglyph": {
      "label": "anaglyph",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nanaglyph(rune) → Rune\n```\nRenders the specified Rune in a tab as an anaglyph. Use 3D glasses to view the anaglyph.",
      "parameters": [
        "rune"
      ]
    },
    "animate_anaglyph": {
      "label": "animate_anaglyph",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nanimate_anaglyph(duration, fps, func) → AnimatedRune\n```\nCreate an animation of anaglyph runes",
      "parameters": [
        "duration",
        "fps",
        "func"
      ]
    },
    "animate_rune": {
      "label": "animate_rune",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nanimate_rune(duration, fps, func) → AnimatedRune\n```\nCreate an animation of runes",
      "parameters": [
        "duration",
        "fps",
        "func"
      ]
    },
    "beside": {
      "label": "beside",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nbeside(rune1, rune2) → Rune\n```\nMakes a new Rune from two given Runes by placing the first on the left of the second, both occupying equal portions of the width of the result",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "beside_frac": {
      "label": "beside_frac",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nbeside_frac(frac, rune1, rune2) → Rune\n```\nMakes a new Rune from two given Runes by placing the first on the left of the second such that the first one occupies frac portion of the width of the result and the second the rest",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "black": {
      "label": "black",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nblack(rune) → Rune\n```\nColors the given rune black (#000000).",
      "parameters": [
        "rune"
      ]
    },
    "blue": {
      "label": "blue",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nblue(rune) → Rune\n```\nColors the given rune blue (#2196F3).",
      "parameters": [
        "rune"
      ]
    },
    "brown": {
      "label": "brown",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nbrown(rune) → Rune\n```\nColors the given rune brown.",
      "parameters": [
        "rune"
      ]
    },
    "color": {
      "label": "color",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\ncolor(rune, r, g, b) → Rune\n```\nAdds color to rune by specifying the red, green, blue (RGB) value, ranging from 0.0 to 1.0. RGB is additive: if all values are 1, the color is white, and if all values are 0, the color is black.",
      "parameters": [
        "rune",
        "r",
        "g",
        "b"
      ]
    },
    "flip_horiz": {
      "label": "flip_horiz",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nflip_horiz(rune) → Rune\n```\nMakes a new Rune from a given Rune by flipping it around a vertical axis, creating a mirror image",
      "parameters": [
        "rune"
      ]
    },
    "flip_vert": {
      "label": "flip_vert",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nflip_vert(rune) → Rune\n```\nMakes a new Rune from a given Rune by flipping it around a horizontal axis, turning it upside down",
      "parameters": [
        "rune"
      ]
    },
    "from_url": {
      "label": "from_url",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nfrom_url(imageUrl) → Rune\n```\nCreate a rune using the image provided in the url",
      "parameters": [
        "imageUrl"
      ]
    },
    "green": {
      "label": "green",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\ngreen(rune) → Rune\n```\nColors the given rune green (#4CAF50).",
      "parameters": [
        "rune"
      ]
    },
    "hollusion": {
      "label": "hollusion",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nhollusion(rune) → Rune\n```\nRenders the specified Rune in a tab as a hollusion, with a default magnitude of 0.1.",
      "parameters": [
        "rune"
      ]
    },
    "hollusion_magnitude": {
      "label": "hollusion_magnitude",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nhollusion_magnitude(rune, magnitude) → Rune\n```\nRenders the specified Rune in a tab as a hollusion, using the specified magnitude.",
      "parameters": [
        "rune",
        "magnitude"
      ]
    },
    "indigo": {
      "label": "indigo",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nindigo(rune) → Rune\n```\nColors the given rune indigo (#3F51B5).",
      "parameters": [
        "rune"
      ]
    },
    "make_cross": {
      "label": "make_cross",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nmake_cross(rune) → Rune\n```\nMakes a new Rune from a given Rune by arranging into a square for copies of the given Rune in different orientations",
      "parameters": [
        "rune"
      ]
    },
    "orange": {
      "label": "orange",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\norange(rune) → Rune\n```\nColors the given rune orange (#FF9800).",
      "parameters": [
        "rune"
      ]
    },
    "overlay": {
      "label": "overlay",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\noverlay(rune1, rune2) → Rune\n```\nThe depth range of the z-axis of a rune is \\[0,-1\\], this function maps the depth range of rune1 and rune2 to \\[0,-0.5\\] and \\[-0.5,-1\\] respectively.",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "overlay_frac": {
      "label": "overlay_frac",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\noverlay_frac(frac, rune1, rune2) → Rune\n```\nThe depth range of the z-axis of a rune is \\[0,-1\\], this function gives a \\[0, -frac\\] of the depth range to rune1 and the rest to rune2.",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "pink": {
      "label": "pink",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\npink(rune) → Rune\n```\nColors the given rune pink (#E91E63s).",
      "parameters": [
        "rune"
      ]
    },
    "purple": {
      "label": "purple",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\npurple(rune) → Rune\n```\nColors the given rune purple (#AA00FF).",
      "parameters": [
        "rune"
      ]
    },
    "quarter_turn_left": {
      "label": "quarter_turn_left",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nquarter_turn_left(rune) → Rune\n```\nMakes a new Rune from a given Rune by turning it a quarter-turn in anti-clockwise direction.",
      "parameters": [
        "rune"
      ]
    },
    "quarter_turn_right": {
      "label": "quarter_turn_right",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nquarter_turn_right(rune) → Rune\n```\nMakes a new Rune from a given Rune by turning it a quarter-turn around the centre in clockwise direction.",
      "parameters": [
        "rune"
      ]
    },
    "random_color": {
      "label": "random_color",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nrandom_color(rune) → Rune\n```\nGives random color to the given rune. The color is chosen randomly from the following nine colors: red, pink, purple, indigo, blue, green, yellow, orange, brown",
      "parameters": [
        "rune"
      ]
    },
    "red": {
      "label": "red",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nred(rune) → Rune\n```\nColors the given rune red (#F44336).",
      "parameters": [
        "rune"
      ]
    },
    "repeat_pattern": {
      "label": "repeat_pattern",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nrepeat_pattern(n, pattern, initial) → Rune\n```\nApplies a given function n times to an initial value",
      "parameters": [
        "n",
        "pattern",
        "initial"
      ]
    },
    "rotate": {
      "label": "rotate",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nrotate(rad, rune) → Rune\n```\nRotates a given Rune by a given angle, given in radians, in anti-clockwise direction. Note that parts of the Rune may be cropped as a result.",
      "parameters": [
        "rad",
        "rune"
      ]
    },
    "scale": {
      "label": "scale",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nscale(ratio, rune) → Rune\n```\nScales a given Rune by a given factor in both x and y direction",
      "parameters": [
        "ratio",
        "rune"
      ]
    },
    "scale_independent": {
      "label": "scale_independent",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nscale_independent(ratio_x, ratio_y, rune) → Rune\n```\nScales a given Rune by separate factors in x and y direction",
      "parameters": [
        "ratio_x",
        "ratio_y",
        "rune"
      ]
    },
    "show": {
      "label": "show",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nshow(rune) → Rune\n```\nRenders the specified Rune in a tab as a basic drawing.",
      "parameters": [
        "rune"
      ]
    },
    "stack": {
      "label": "stack",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nstack(rune1, rune2) → Rune\n```\nMakes a new Rune from two given Runes by placing the first on top of the second, each occupying equal parts of the height of the result",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "stack_frac": {
      "label": "stack_frac",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nstack_frac(frac, rune1, rune2) → Rune\n```\nMakes a new Rune from two given Runes by placing the first on top of the second such that the first one occupies frac portion of the height of the result and the second the rest",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "stackn": {
      "label": "stackn",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nstackn(n, rune) → Rune\n```\nMakes a new Rune from a given Rune by vertically stacking n copies of it",
      "parameters": [
        "n",
        "rune"
      ]
    },
    "translate": {
      "label": "translate",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\ntranslate(x, y, rune) → Rune\n```\nTranslates a given Rune by given values in x and y direction",
      "parameters": [
        "x",
        "y",
        "rune"
      ]
    },
    "turn_upside_down": {
      "label": "turn_upside_down",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nturn_upside_down(rune) → Rune\n```\nMakes a new Rune from a given Rune by turning it upside-down",
      "parameters": [
        "rune"
      ]
    },
    "white": {
      "label": "white",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nwhite(rune) → Rune\n```\nColors the given rune white (#FFFFFF).",
      "parameters": [
        "rune"
      ]
    },
    "yellow": {
      "label": "yellow",
      "meta": "func",
      "title": "Auto-import from rune",
      "description": "```source\nyellow(rune) → Rune\n```\nColors the given rune yellow (#FFEB3B).",
      "parameters": [
        "rune"
      ]
    }
  },
  "rune_in_words": {
    "blank": {
      "label": "blank",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### blank:string\nRune with the shape of a blank square"
    },
    "circle": {
      "label": "circle",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### circle:string\nRune with the shape of a circle"
    },
    "corner": {
      "label": "corner",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### corner:string\nRune with black triangle, filling upper right corner"
    },
    "heart": {
      "label": "heart",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### heart:string\nRune with the shape of a heart"
    },
    "nova": {
      "label": "nova",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### nova:string\nRune with the shape of two overlapping triangles, residing in the upper half of the shape"
    },
    "pentagram": {
      "label": "pentagram",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### pentagram:string\nRune with the shape of a pentagram"
    },
    "rcross": {
      "label": "rcross",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### rcross:string\nRune with the shape of a small square inside a large square, each diagonally split into a black and white half"
    },
    "ribbon": {
      "label": "ribbon",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### ribbon:string\nRune with the shape of a ribbon winding outwards in an anticlockwise spiral"
    },
    "sail": {
      "label": "sail",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### sail:string\nRune with the shape of a sail"
    },
    "square": {
      "label": "square",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### square:string\nRune with the shape of a full square"
    },
    "triangle": {
      "label": "triangle",
      "meta": "const",
      "title": "Auto-import from rune_in_words",
      "description": "#### triangle:string\nRune with the shape of a triangle"
    },
    "anaglyph": {
      "label": "anaglyph",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nanaglyph(rune) → string\n```\nRenders the specified Rune in a tab as an anaglyph. Use 3D glasses to view the anaglyph.",
      "parameters": [
        "rune"
      ]
    },
    "beside": {
      "label": "beside",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nbeside(rune1, rune2) → string\n```\nMakes a new Rune from two given Runes by placing the first on the left of the second, both occupying equal portions of the width of the result",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "beside_frac": {
      "label": "beside_frac",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nbeside_frac(frac, rune1, rune2) → string\n```\nMakes a new Rune from two given Runes by placing the first on the left of the second such that the first one occupies frac portion of the width of the result and the second the rest",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "black": {
      "label": "black",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nblack(rune) → string\n```\nColors the given rune black (#000000).",
      "parameters": [
        "rune"
      ]
    },
    "blue": {
      "label": "blue",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nblue(rune) → string\n```\nColors the given rune blue (#2196F3).",
      "parameters": [
        "rune"
      ]
    },
    "brown": {
      "label": "brown",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nbrown(rune) → string\n```\nColors the given rune brown.",
      "parameters": [
        "rune"
      ]
    },
    "color": {
      "label": "color",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\ncolor(rune, r, g, b) → string\n```\nAdds color to rune by specifying the red, green, blue (RGB) value, ranging from 0.0 to 1.0. RGB is additive: if all values are 1, the color is white, and if all values are 0, the color is black.",
      "parameters": [
        "rune",
        "r",
        "g",
        "b"
      ]
    },
    "flip_horiz": {
      "label": "flip_horiz",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nflip_horiz(rune) → string\n```\nMakes a new Rune from a given Rune by flipping it around a vertical axis, creating a mirror image",
      "parameters": [
        "rune"
      ]
    },
    "flip_vert": {
      "label": "flip_vert",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nflip_vert(rune) → string\n```\nMakes a new Rune from a given Rune by flipping it around a horizontal axis, turning it upside down",
      "parameters": [
        "rune"
      ]
    },
    "from_url": {
      "label": "from_url",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nfrom_url(imageUrl) → string\n```\nCreate a rune using the image provided in the url",
      "parameters": [
        "imageUrl"
      ]
    },
    "green": {
      "label": "green",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\ngreen(rune) → string\n```\nColors the given rune green (#4CAF50).",
      "parameters": [
        "rune"
      ]
    },
    "hollusion": {
      "label": "hollusion",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nhollusion(rune) → string\n```\nRenders the specified Rune in a tab as a hollusion, with a default magnitude of 0.1.",
      "parameters": [
        "rune"
      ]
    },
    "indigo": {
      "label": "indigo",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nindigo(rune) → string\n```\nColors the given rune indigo (#3F51B5).",
      "parameters": [
        "rune"
      ]
    },
    "make_cross": {
      "label": "make_cross",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nmake_cross(rune) → string\n```\nMakes a new Rune from a given Rune by arranging into a square for copies of the given Rune in different orientations",
      "parameters": [
        "rune"
      ]
    },
    "orange": {
      "label": "orange",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\norange(rune) → string\n```\nColors the given rune orange (#FF9800).",
      "parameters": [
        "rune"
      ]
    },
    "overlay": {
      "label": "overlay",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\noverlay(rune1, rune2) → string\n```\nThe depth range of the z-axis of a rune is \\[0,-1\\], this function maps the depth range of rune1 and rune2 to \\[0,-0.5\\] and \\[-0.5,-1\\] respectively.",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "overlay_frac": {
      "label": "overlay_frac",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\noverlay_frac(frac, rune1, rune2) → string\n```\nThe depth range of the z-axis of a rune is \\[0,-1\\], this function gives a \\[0, -frac\\] of the depth range to rune1 and the rest to rune2.",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "pink": {
      "label": "pink",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\npink(rune) → string\n```\nColors the given rune pink (#E91E63s).",
      "parameters": [
        "rune"
      ]
    },
    "purple": {
      "label": "purple",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\npurple(rune) → string\n```\nColors the given rune purple (#AA00FF).",
      "parameters": [
        "rune"
      ]
    },
    "quarter_turn_left": {
      "label": "quarter_turn_left",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nquarter_turn_left(rune) → string\n```\nMakes a new Rune from a given Rune by turning it a quarter-turn in anti-clockwise direction.",
      "parameters": [
        "rune"
      ]
    },
    "quarter_turn_right": {
      "label": "quarter_turn_right",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nquarter_turn_right(rune) → string\n```\nMakes a new Rune from a given Rune by turning it a quarter-turn around the centre in clockwise direction.",
      "parameters": [
        "rune"
      ]
    },
    "random_color": {
      "label": "random_color",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nrandom_color(rune) → string\n```\nGives random color to the given rune. The color is chosen randomly from the following nine colors: red, pink, purple, indigo, blue, green, yellow, orange, brown",
      "parameters": [
        "rune"
      ]
    },
    "red": {
      "label": "red",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nred(rune) → string\n```\nColors the given rune red (#F44336).",
      "parameters": [
        "rune"
      ]
    },
    "repeat_pattern": {
      "label": "repeat_pattern",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nrepeat_pattern(n, pattern, initial) → string\n```\nApplies a given function n times to an initial value",
      "parameters": [
        "n",
        "pattern",
        "initial"
      ]
    },
    "rotate": {
      "label": "rotate",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nrotate(rad, rune) → string\n```\nRotates a given Rune by a given angle, given in radians, in anti-clockwise direction. Note that parts of the Rune may be cropped as a result.",
      "parameters": [
        "rad",
        "rune"
      ]
    },
    "scale": {
      "label": "scale",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nscale(ratio, rune) → string\n```\nScales a given Rune by a given factor in both x and y direction",
      "parameters": [
        "ratio",
        "rune"
      ]
    },
    "scale_independent": {
      "label": "scale_independent",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nscale_independent(ratio_x, ratio_y, rune) → string\n```\nScales a given Rune by separate factors in x and y direction",
      "parameters": [
        "ratio_x",
        "ratio_y",
        "rune"
      ]
    },
    "show": {
      "label": "show",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nshow(rune) → string\n```\nRenders the specified Rune in a tab as a basic drawing.",
      "parameters": [
        "rune"
      ]
    },
    "stack": {
      "label": "stack",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nstack(rune1, rune2) → string\n```\nMakes a new Rune from two given Runes by placing the first on top of the second, each occupying equal parts of the height of the result",
      "parameters": [
        "rune1",
        "rune2"
      ]
    },
    "stack_frac": {
      "label": "stack_frac",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nstack_frac(frac, rune1, rune2) → string\n```\nMakes a new Rune from two given Runes by placing the first on top of the second such that the first one occupies frac portion of the height of the result and the second the rest",
      "parameters": [
        "frac",
        "rune1",
        "rune2"
      ]
    },
    "stackn": {
      "label": "stackn",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nstackn(n, rune) → string\n```\nMakes a new Rune from a given Rune by vertically stacking n copies of it",
      "parameters": [
        "n",
        "rune"
      ]
    },
    "translate": {
      "label": "translate",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\ntranslate(x, y, rune) → string\n```\nTranslates a given Rune by given values in x and y direction",
      "parameters": [
        "x",
        "y",
        "rune"
      ]
    },
    "turn_upside_down": {
      "label": "turn_upside_down",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nturn_upside_down(rune) → string\n```\nMakes a new Rune from a given Rune by turning it upside-down",
      "parameters": [
        "rune"
      ]
    },
    "white": {
      "label": "white",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nwhite(rune) → string\n```\nColors the given rune white (#FFFFFF).",
      "parameters": [
        "rune"
      ]
    },
    "yellow": {
      "label": "yellow",
      "meta": "func",
      "title": "Auto-import from rune_in_words",
      "description": "```source\nyellow(rune) → string\n```\nColors the given rune yellow (#FFEB3B).",
      "parameters": [
        "rune"
      ]
    }
  },
  "sound_matrix": {
    "clear_matrix": {
      "label": "clear_matrix",
      "meta": "const",
      "title": "Auto-import from sound_matrix",
      "description": ""
    },
    "ToneMatrix": {
      "label": "ToneMatrix",
      "meta": "const",
      "title": "Auto-import from sound_matrix",
      "description": "#### ToneMatrix:Object\nNo description available"
    },
    "clear_all_timeout": {
      "label": "clear_all_timeout",
      "meta": "func",
      "title": "Auto-import from sound_matrix",
      "description": "```source\nclear_all_timeout() → void\n```\nNo description available",
      "parameters": []
    },
    "get_matrix": {
      "label": "get_matrix",
      "meta": "func",
      "title": "Auto-import from sound_matrix",
      "description": "```source\nget_matrix() → List\n```\nNo description available",
      "parameters": []
    },
    "set_timeout": {
      "label": "set_timeout",
      "meta": "func",
      "title": "Auto-import from sound_matrix",
      "description": "```source\nset_timeout(f, t) → void\n```\nNo description available",
      "parameters": [
        "f",
        "t"
      ]
    }
  },
  "csg": {
    "black": {
      "label": "black",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### black:string\nA hex color code for black (#000000)."
    },
    "blue": {
      "label": "blue",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### blue:string\nA hex color code for blue (#5555FF)."
    },
    "crimson": {
      "label": "crimson",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### crimson:string\nA hex color code for dark red (#AA0000)."
    },
    "cyan": {
      "label": "cyan",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### cyan:string\nA hex color code for cyan (#55FFFF)."
    },
    "gray": {
      "label": "gray",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### gray:string\nA hex color code for dark gray (#555555)."
    },
    "green": {
      "label": "green",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### green:string\nA hex color code for green (#00AA00)."
    },
    "lime": {
      "label": "lime",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### lime:string\nA hex color code for light green (#55FF55)."
    },
    "navy": {
      "label": "navy",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### navy:string\nA hex color code for dark blue (#0000AA)."
    },
    "orange": {
      "label": "orange",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### orange:string\nA hex color code for orange (#FFAA00)."
    },
    "pink": {
      "label": "pink",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### pink:string\nA hex color code for pink (#FF55FF)."
    },
    "purple": {
      "label": "purple",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### purple:string\nA hex color code for purple (#AA00AA)."
    },
    "rose": {
      "label": "rose",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### rose:string\nA hex color code for light red (#FF5555)."
    },
    "silver": {
      "label": "silver",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### silver:string\nA hex color code for light gray (#AAAAAA)."
    },
    "teal": {
      "label": "teal",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### teal:string\nA hex color code for dark cyan (#00AAAA)."
    },
    "white": {
      "label": "white",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### white:string\nA hex color code for white (#FFFFFF)."
    },
    "yellow": {
      "label": "yellow",
      "meta": "const",
      "title": "Auto-import from csg",
      "description": "#### yellow:string\nA hex color code for yellow (#FFFF55)."
    },
    "bounding_box": {
      "label": "bounding_box",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nbounding_box(shape) → Function\n```\nReturns a function of type (string, string) → number, for getting the specified Shape's bounding box coordinates.\n\nIts first parameter must be \"x\", \"y\", or \"z\", indicating the coordinate axis.\n\nIts second parameter must be \"min\" or \"max\", indicating the minimum or maximum bounding box coordinate respectively.\n\nFor example, if a sphere of radius 0.5 is centred at (0.5, 0.5, 0.5), its minimum bounding coordinates will be (0, 0, 0), and its maximum bounding coordinates will be (1, 1, 1).\n\n    // Sample usage\n    const getter_function = bounding_box(sphere(silver));\n    display(getter_function(\"y\", \"max\")); // Displays 1, the maximum y coordinate",
      "parameters": [
        "shape"
      ]
    },
    "cone": {
      "label": "cone",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ncone(hex) → Shape\n```\nReturns a cone Shape in the specified color.\n\n*   Height: 1\n*   Radius: 0.5\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "cube": {
      "label": "cube",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ncube(hex) → Shape\n```\nReturns a cube Shape in the specified color.\n\n*   Side length: 1\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "cylinder": {
      "label": "cylinder",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ncylinder(hex) → Shape\n```\nReturns an upright cylinder Shape in the specified color.\n\n*   Height: 1\n*   Radius: 0.5\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "download_shape_stl": {
      "label": "download_shape_stl",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ndownload_shape_stl(shape) → Promise<void>\n```\nExports the specified Shape as an STL file, downloaded to your device.\n\nThe file can be used for purposes such as 3D printing.",
      "parameters": [
        "shape"
      ]
    },
    "empty_shape": {
      "label": "empty_shape",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nempty_shape() → Shape\n```\nAn empty Shape.",
      "parameters": []
    },
    "geodesic_sphere": {
      "label": "geodesic_sphere",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ngeodesic_sphere(hex) → Shape\n```\nReturns a geodesic sphere Shape in the specified color.\n\n*   Radius: 0.5\n*   Center: Floating at (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "group": {
      "label": "group",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ngroup(operables) → Group\n```\nGroups the specified list of Operables together. Groups can contain a mix of Shapes and other nested Groups.\n\nGroups cannot be operated on, but can be transformed together. I.e. a call like `intersect(group_a, group_b)` is not allowed, but a call like `scale(group, 5, 5, 5)` is.",
      "parameters": [
        "operables"
      ]
    },
    "intersect": {
      "label": "intersect",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nintersect(first, second) → Shape\n```\nReturns the intersection of the two specified Shapes.",
      "parameters": [
        "first",
        "second"
      ]
    },
    "is_group": {
      "label": "is_group",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nis_group(parameter) → boolean\n```\nChecks if the given parameter is a Group.",
      "parameters": [
        "parameter"
      ]
    },
    "is_shape": {
      "label": "is_shape",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nis_shape(parameter) → boolean\n```\nChecks if the given parameter is a Shape.",
      "parameters": [
        "parameter"
      ]
    },
    "prism": {
      "label": "prism",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nprism(hex) → Shape\n```\nReturns an upright triangular prism Shape in the specified color.\n\n*   Height: 1\n*   Side length: 1\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "pyramid": {
      "label": "pyramid",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\npyramid(hex) → Shape\n```\nReturns a square pyramid Shape in the specified color.\n\n*   Height: 1\n*   Base length: 1\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "render": {
      "label": "render",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrender(operable) → RenderGroup\n```\nRenders the specified Operable.",
      "parameters": [
        "operable"
      ]
    },
    "render_axes": {
      "label": "render_axes",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrender_axes(operable) → RenderGroup\n```\nRenders the specified Operable, along with z, y, and z axes.",
      "parameters": [
        "operable"
      ]
    },
    "render_grid": {
      "label": "render_grid",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrender_grid(operable) → RenderGroup\n```\nRenders the specified Operable, along with a grid.",
      "parameters": [
        "operable"
      ]
    },
    "render_grid_axes": {
      "label": "render_grid_axes",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrender_grid_axes(operable) → RenderGroup\n```\nRenders the specified Operable, along with both a grid and axes.",
      "parameters": [
        "operable"
      ]
    },
    "rgb": {
      "label": "rgb",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrgb(redValue, greenValue, blueValue) → string\n```\nReturns a hex color code representing the specified RGB values.",
      "parameters": [
        "redValue",
        "greenValue",
        "blueValue"
      ]
    },
    "rotate": {
      "label": "rotate",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrotate(operable, xAngle, yAngle, zAngle) → Operable\n```\nSequentially rotates the specified Operable about the x, y, and z axes using the specified angles, in radians (i.e. 2π represents 360°).\n\nThe order of rotation is: x, y, then z axis. The order of rotation can affect the result, so you may wish to make multiple separate calls to rotate() if you require a specific order of rotation.",
      "parameters": [
        "operable",
        "xAngle",
        "yAngle",
        "zAngle"
      ]
    },
    "rounded_cube": {
      "label": "rounded_cube",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrounded_cube(hex) → Shape\n```\nReturns a rounded cube Shape in the specified color.\n\n*   Side length: 1\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "rounded_cylinder": {
      "label": "rounded_cylinder",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nrounded_cylinder(hex) → Shape\n```\nReturns a rounded, upright cylinder Shape in the specified color.\n\n*   Height: 1\n*   Radius: 0.5\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "scale": {
      "label": "scale",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nscale(operable, xFactor, yFactor, zFactor) → Operable\n```\nScales the specified Operable in the x, y, and z directions using the specified factors. Scaling is done about the origin (0, 0, 0).\n\nFor example, a factor of 0.5 results in a smaller Shape, while a factor of 2 results in a larger Shape. A factor of 1 results in the original Shape. Factors must be greater than 0.",
      "parameters": [
        "operable",
        "xFactor",
        "yFactor",
        "zFactor"
      ]
    },
    "sphere": {
      "label": "sphere",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nsphere(hex) → Shape\n```\nReturns a sphere Shape in the specified color.\n\n*   Radius: 0.5\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "star": {
      "label": "star",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nstar(hex) → Shape\n```\nReturns an upright extruded star Shape in the specified color.\n\n*   Height: 1\n*   Center: (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "subtract": {
      "label": "subtract",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nsubtract(target, subtractedShape) → Shape\n```\nSubtracts the second Shape from the first Shape, returning the resultant Shape.",
      "parameters": [
        "target",
        "subtractedShape"
      ]
    },
    "torus": {
      "label": "torus",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ntorus(hex) → Shape\n```\nReturns a torus (donut) Shape in the specified color.\n\n*   Inner radius: 0.15 (ring is 0.3 thick)\n*   Total radius: 0.5 (from the centre of the hole to \"outside\")\n*   Center: Floating at (0.5, 0.5, 0.5)",
      "parameters": [
        "hex"
      ]
    },
    "translate": {
      "label": "translate",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\ntranslate(operable, xOffset, yOffset, zOffset) → Operable\n```\nTranslates (moves) the specified Operable in the x, y, and z directions using the specified offsets.",
      "parameters": [
        "operable",
        "xOffset",
        "yOffset",
        "zOffset"
      ]
    },
    "ungroup": {
      "label": "ungroup",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nungroup(g) → List\n```\nUngroups the specified Group, returning the list of Shapes and/or nested Groups contained within.",
      "parameters": [
        "g"
      ]
    },
    "union": {
      "label": "union",
      "meta": "func",
      "title": "Auto-import from csg",
      "description": "```source\nunion(first, second) → Shape\n```\nReturns the union of the two specified Shapes.",
      "parameters": [
        "first",
        "second"
      ]
    }
  },
  "repl": {
    "default_js_slang": {
      "label": "default_js_slang",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\ndefault_js_slang(_program) → any\n```\nWhen use this function as the entrance function in the parameter of \"set\\_evaluator\", the Programmable Repl will directly use the default js-slang interpreter to run your program in Programmable Repl editor. Do not directly call this function in your own code.",
      "parameters": [
        "_program"
      ]
    },
    "repl_display": {
      "label": "repl_display",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\nrepl_display(content) → any\n```\nDisplay message in Programmable Repl Tab If you give a pair as the parameter, it will use the given pair to generate rich text and use rich text display mode to display the string in Programmable Repl Tab with undefined return value (see module description for more information). If you give other things as the parameter, it will simply display the toString value of the parameter in Programmable Repl Tab and returns the displayed string itself.\n\n**Rich Text Display**\n\n*   First you need to `import { repl_display } from \"repl\";`\n*   Format: pair(pair(\"string\",style),style)...\n*   Examples:\n\n    // A large italic underlined \"Hello World\"\n    repl_display(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"));\n    \n    // A large italic underlined \"Hello World\" in blue\n    repl_display(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"),\"italic\"), \"bold\"), \"gigantic\"), \"clrt#0000ff\"));\n    \n    // A large italic underlined \"Hello World\" with orange foreground and purple background\n    repl_display(pair(pair(pair(pair(pair(pair(\"Hello World\", \"underline\"), \"italic\"), \"bold\"), \"gigantic\"), \"clrb#A000A0\"),\"clrt#ff9700\"));\n\n*   Coloring:\n    *   `clrt` stands for text color, `clrb` stands for background color. The color string are in hexadecimal begin with \"#\" and followed by 6 hexadecimal digits.\n    *   Example: `pair(\"123\",\"clrt#ff0000\")` will produce a red \"123\"; `pair(\"456\",\"clrb#00ff00\")` will produce a green \"456\".\n*   Besides coloring, the following styles are also supported:\n    *   `bold`: Make the text bold.\n    *   `italic`: Make the text italic.\n    *   `small`: Make the text in small size.\n    *   `medium`: Make the text in medium size.\n    *   `large`: Make the text in large size.\n    *   `gigantic`: Make the text in very large size.\n    *   `underline`: Underline the text.\n*   Note that if you apply the conflicting attributes together, only one conflicted style will take effect and other conflicting styles will be discarded, like \"pair(pair(pair(\"123\", small), medium), large) \" (Set conflicting font size for the same text)\n*   Also note that for safety matters, certain words and characters are not allowed to appear under rich text display mode.",
      "parameters": [
        "content"
      ]
    },
    "set_background_image": {
      "label": "set_background_image",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\nset_background_image(img_url, background_color_alpha) → void\n```\nSet Programmable Repl editor background image with a customized image URL",
      "parameters": [
        "img_url",
        "background_color_alpha"
      ]
    },
    "set_evaluator": {
      "label": "set_evaluator",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\nset_evaluator(evalFunc) → Object\n```\nSetup the programmable REPL with given evaulator's entrance function\n\nThe function should take one parameter as the code from the module's editor, for example:\n\n    function parse_and_evaluate(code) {\n      // ...\n    }",
      "parameters": [
        "evalFunc"
      ]
    },
    "set_font_size": {
      "label": "set_font_size",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\nset_font_size(font_size_px) → void\n```\nSet Programmable Repl editor font size",
      "parameters": [
        "font_size_px"
      ]
    },
    "set_program_text": {
      "label": "set_program_text",
      "meta": "func",
      "title": "Auto-import from repl",
      "description": "```source\nset_program_text(text) → void\n```\nSet program text in the Repl editor to the given string",
      "parameters": [
        "text"
      ]
    }
  },
  "remote_execution": {
    "EV3": {
      "label": "EV3",
      "meta": "const",
      "title": "Auto-import from remote_execution",
      "description": "#### EV3:Object\nNo description available"
    }
  },
  "wasm": {
    "wcompile": {
      "label": "wcompile",
      "meta": "func",
      "title": "Auto-import from wasm",
      "description": "```source\nwcompile(program) → number[]\n```\nCompile a (hopefully valid) WebAssembly Text module to binary.",
      "parameters": [
        "program"
      ]
    },
    "wrun": {
      "label": "wrun",
      "meta": "func",
      "title": "Auto-import from wasm",
      "description": "```source\nwrun(buffer) → AlternatingLinkedList<string, ExportValue>\n```\nRun a compiled WebAssembly Binary Buffer.",
      "parameters": [
        "buffer"
      ]
    }
  },
  "arcade_2d": {
    "build_game": {
      "label": "build_game",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nbuild_game() → BuildGame\n```\nBuilds the game. Processes the initialization and updating of the game. All created GameObjects and their properties are passed into the game.",
      "parameters": []
    },
    "create_audio": {
      "label": "create_audio",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_audio(audio_url, volume_level) → AudioClip\n```\nCreate an audio clip that can be referenced. Source Academy assets can be found at https://source-academy-assets.s3-ap-southeast-1.amazonaws.com/ with Ctrl+f \".mp3\". Phaser audio assets can be found at https://labs.phaser.io/assets/audio. Phaser sound effects assets can be found at https://labs.phaser.io/assets/audio/SoundEffects/. If Phaser assets are unavailable, go to https://github.com/photonstorm/phaser3-examples/tree/master/public/assets to get the asset path and append it to `https://labs.phaser.io/assets/`. This function should not be called in your update function.",
      "parameters": [
        "audio_url",
        "volume_level"
      ]
    },
    "create_circle": {
      "label": "create_circle",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_circle(radius) → ShapeGameObject\n```\nCreates a CircleGameObject that takes in circle shape properties.",
      "parameters": [
        "radius"
      ]
    },
    "create_rectangle": {
      "label": "create_rectangle",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_rectangle(width, height) → ShapeGameObject\n```\nCreates a RectangleGameObject that takes in rectangle shape properties.",
      "parameters": [
        "width",
        "height"
      ]
    },
    "create_sprite": {
      "label": "create_sprite",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_sprite(image_url) → SpriteGameObject\n```\nCreates a GameObject that contains a Sprite image reference. Source Academy assets can be used by specifying path without the prepend. Source Academy assets can be found at https://source-academy-assets.s3-ap-southeast-1.amazonaws.com/ with Ctrl+f \".png\". Phaser assets can be found at https://labs.phaser.io/assets/. If Phaser assets are unavailable, go to https://github.com/photonstorm/phaser3-examples/tree/master/public/assets to get the asset path and append it to `https://labs.phaser.io/assets/`. Assets from other websites can also be used if they support Cross-Origin Resource Sharing (CORS), but the full path must be specified.",
      "parameters": [
        "image_url"
      ]
    },
    "create_text": {
      "label": "create_text",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_text(text) → TextGameObject\n```\nCreates a GameObject that contains a text reference.",
      "parameters": [
        "text"
      ]
    },
    "create_triangle": {
      "label": "create_triangle",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ncreate_triangle(width, height) → ShapeGameObject\n```\nCreates a TriangleGameObject that takes in an downright isosceles triangle shape properties.",
      "parameters": [
        "width",
        "height"
      ]
    },
    "debug_log": {
      "label": "debug_log",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ndebug_log(info) → void\n```\nLogs any information passed into it within the `update_loop`. Displays the information in the top-left corner of the canvas only if debug mode is enabled. Calling `display` within the `update_loop` function will not work as intended, so use `debug_log` instead.",
      "parameters": [
        "info"
      ]
    },
    "enable_debug": {
      "label": "enable_debug",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nenable_debug() → void\n```\nEnables debug mode. Hit box interaction between pointer and GameObjects are shown with a green outline in debug mode. Hit box interaction between GameObjects is based off a rectangular area instead, which is not reflected. debug\\_log(...) information is shown on the top-left corner of the canvas.",
      "parameters": []
    },
    "gameobjects_overlap": {
      "label": "gameobjects_overlap",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ngameobjects_overlap(gameObject1, gameObject2) → boolean\n```\nChecks if two gameobjects overlap with each other, using a rectangular bounding box. This bounding box is rectangular, for all GameObjects. This function should be called in your update function.",
      "parameters": [
        "gameObject1",
        "gameObject2"
      ]
    },
    "get_game_time": {
      "label": "get_game_time",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nget_game_time() → number\n```\nGets the current in-game time, which is based off the start time. This function should be called in your update function.",
      "parameters": []
    },
    "get_loop_count": {
      "label": "get_loop_count",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nget_loop_count() → number\n```\nGets the current loop count, which is the number of frames that have run. Depends on the framerate set for how fast this changes. This function should be called in your update function.",
      "parameters": []
    },
    "input_key_down": {
      "label": "input_key_down",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ninput_key_down(key_name) → boolean\n```\nDetects if a key input is pressed down. This function must be called in your update function to detect inputs. To get specific keys, go to https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key#result.",
      "parameters": [
        "key_name"
      ]
    },
    "input_left_mouse_down": {
      "label": "input_left_mouse_down",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ninput_left_mouse_down() → boolean\n```\nDetects if the left mouse button is pressed down. This function should be called in your update function.",
      "parameters": []
    },
    "input_right_mouse_down": {
      "label": "input_right_mouse_down",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\ninput_right_mouse_down() → boolean\n```\nDetects if the right mouse button is pressed down. This function should be called in your update function.",
      "parameters": []
    },
    "loop_audio": {
      "label": "loop_audio",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nloop_audio(audio_clip) → AudioClip\n```\nLoops the audio clip provided, which will play the audio clip indefinitely. Setting whether an audio clip should loop be done outside the update function.",
      "parameters": [
        "audio_clip"
      ]
    },
    "play_audio": {
      "label": "play_audio",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nplay_audio(audio_clip) → AudioClip\n```\nPlays the audio clip, and stops when the audio clip is over.",
      "parameters": [
        "audio_clip"
      ]
    },
    "pointer_over_gameobject": {
      "label": "pointer_over_gameobject",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\npointer_over_gameobject(gameObject) → boolean\n```\nDetects if the (mouse) pointer is over the gameobject. This function should be called in your update function.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_color": {
      "label": "query_color",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_color(gameObject) → ColorRGBA\n```\nQueries the \\[r, g, b, a\\] color property of the GameObject.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_flip": {
      "label": "query_flip",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_flip(gameObject) → FlipXY\n```\nQueries the \\[x, y\\] flip property of the GameObject.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_id": {
      "label": "query_id",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_id(gameObject) → number\n```\nQueries the id of the GameObject. The id of a GameObject is in the order of creation, starting from 0.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_pointer_position": {
      "label": "query_pointer_position",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_pointer_position() → PositionXY\n```\nQueries the (mouse) pointer position.",
      "parameters": []
    },
    "query_position": {
      "label": "query_position",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_position(gameObject) → PositionXY\n```\nQueries the \\[x, y\\] position transform of the GameObject.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_rotation": {
      "label": "query_rotation",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_rotation(gameObject) → number\n```\nQueries the z-rotation transform of the GameObject.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_scale": {
      "label": "query_scale",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_scale(gameObject) → ScaleXY\n```\nQueries the \\[x, y\\] scale transform of the GameObject.",
      "parameters": [
        "gameObject"
      ]
    },
    "query_text": {
      "label": "query_text",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nquery_text(textGameObject) → string\n```\nQueries the text of a Text GameObject.",
      "parameters": [
        "textGameObject"
      ]
    },
    "set_dimensions": {
      "label": "set_dimensions",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nset_dimensions(dimensions) → void\n```\nSets the dimensions of the canvas, which should be between the min and max widths and height.",
      "parameters": [
        "dimensions"
      ]
    },
    "set_fps": {
      "label": "set_fps",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nset_fps(fps) → void\n```\nSets the frames per second of the canvas, which should be between the MIN\\_FPS and MAX\\_FPS. It ranges between 1 and 120, with the default target as 30. This function should not be called in the update function.",
      "parameters": [
        "fps"
      ]
    },
    "set_scale": {
      "label": "set_scale",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nset_scale(scale) → void\n```\nSets the scale (zoom) of the pixels in the canvas. If scale is doubled, then the number of units across would be halved. This has a side effect of making the game pixelated if scale > 1. The default scale is 1.",
      "parameters": [
        "scale"
      ]
    },
    "stop_audio": {
      "label": "stop_audio",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nstop_audio(audio_clip) → AudioClip\n```\nStops the audio clip immediately.",
      "parameters": [
        "audio_clip"
      ]
    },
    "update_color": {
      "label": "update_color",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_color(gameObject, color) → GameObject\n```\nUpdates the color of the GameObject. Note that the value is modulo 256, so passing values greater than 255 is allowed.",
      "parameters": [
        "gameObject",
        "color"
      ]
    },
    "update_flip": {
      "label": "update_flip",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_flip(gameObject, flip) → GameObject\n```\nUpdates the flip state of the GameObject.",
      "parameters": [
        "gameObject",
        "flip"
      ]
    },
    "update_loop": {
      "label": "update_loop",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_loop(update_function) → void\n```\nThis sets the update loop in the canvas. The update loop is run once per frame, so it depends on the fps set for the number of times this loop is run. There should only be one update\\_loop called. All game logic should be handled within your update\\_function. You cannot create GameObjects inside the update\\_loop. game\\_state is an array that can be modified to store anything.",
      "parameters": [
        "update_function"
      ]
    },
    "update_position": {
      "label": "update_position",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_position(gameObject, coordinates) → GameObject\n```\nUpdates the position transform of the GameObject.",
      "parameters": [
        "gameObject",
        "coordinates"
      ]
    },
    "update_rotation": {
      "label": "update_rotation",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_rotation(gameObject, radians) → GameObject\n```\nUpdates the rotation transform of the GameObject.",
      "parameters": [
        "gameObject",
        "radians"
      ]
    },
    "update_scale": {
      "label": "update_scale",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_scale(gameObject, scale) → GameObject\n```\nUpdates the scale transform of the GameObject.",
      "parameters": [
        "gameObject",
        "scale"
      ]
    },
    "update_text": {
      "label": "update_text",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_text(textGameObject, text) → GameObject\n```\nUpdates the text of the TextGameObject.",
      "parameters": [
        "textGameObject",
        "text"
      ]
    },
    "update_to_top": {
      "label": "update_to_top",
      "meta": "func",
      "title": "Auto-import from arcade_2d",
      "description": "```source\nupdate_to_top(gameObject) → GameObject\n```\nRenders this GameObject in front of all other GameObjects.",
      "parameters": [
        "gameObject"
      ]
    }
  },
  "physics_2d": {
    "add_box_object": {
      "label": "add_box_object",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nadd_box_object(pos, rot, velc, size, isStatic) → PhysicsObject\n```\nMakes a box object with given initial position, rotation, velocity, size and add it to the world.",
      "parameters": [
        "pos",
        "rot",
        "velc",
        "size",
        "isStatic"
      ]
    },
    "add_circle_object": {
      "label": "add_circle_object",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nadd_circle_object(pos, rot, velc, radius, isStatic) → PhysicsObject\n```\nMakes a circle object with given initial position, rotation, velocity, radius and add it to the world.",
      "parameters": [
        "pos",
        "rot",
        "velc",
        "radius",
        "isStatic"
      ]
    },
    "add_triangle_object": {
      "label": "add_triangle_object",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nadd_triangle_object(pos, rot, velc, base, height, isStatic) → PhysicsObject\n```\nMakes a triangle object with given initial position, rotation, velocity, base, height and add it to the world.",
      "parameters": [
        "pos",
        "rot",
        "velc",
        "base",
        "height",
        "isStatic"
      ]
    },
    "add_vector": {
      "label": "add_vector",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nadd_vector(vec1, vec2) → Vector2\n```\nAdds two vectors together and returns the resultant vector.",
      "parameters": [
        "vec1",
        "vec2"
      ]
    },
    "add_wall": {
      "label": "add_wall",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nadd_wall(pos, rot, size) → PhysicsObject\n```\nMakes a wall (static box object with no velocity).",
      "parameters": [
        "pos",
        "rot",
        "size"
      ]
    },
    "apply_force": {
      "label": "apply_force",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\napply_force(force, pos, obj) → void\n```\nApllies force to given object at given world point.",
      "parameters": [
        "force",
        "pos",
        "obj"
      ]
    },
    "apply_force_to_center": {
      "label": "apply_force_to_center",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\napply_force_to_center(force, obj) → void\n```\nApplies a force to given object at its center.",
      "parameters": [
        "force",
        "obj"
      ]
    },
    "array_to_vector": {
      "label": "array_to_vector",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\narray_to_vector(arr) → Vector2\n```\nConverts an array of 2 numbers into a 2d vector.",
      "parameters": [
        "arr"
      ]
    },
    "get_angular_velocity": {
      "label": "get_angular_velocity",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nget_angular_velocity(obj) → Vector2\n```\nGets angular velocity of the object at current world time.",
      "parameters": [
        "obj"
      ]
    },
    "get_position": {
      "label": "get_position",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nget_position(obj) → Vector2\n```\nGets position of the object at current world time.",
      "parameters": [
        "obj"
      ]
    },
    "get_rotation": {
      "label": "get_rotation",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nget_rotation(obj) → number\n```\nGets rotation of the object at current world time.",
      "parameters": [
        "obj"
      ]
    },
    "get_velocity": {
      "label": "get_velocity",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nget_velocity(obj) → Vector2\n```\nGets velocity of the object at current world time.",
      "parameters": [
        "obj"
      ]
    },
    "impact_start_time": {
      "label": "impact_start_time",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nimpact_start_time(obj1, obj2) → number\n```\nGets the impact start time of two currently touching objects. Returns -1 if they are not touching.",
      "parameters": [
        "obj1",
        "obj2"
      ]
    },
    "is_touching": {
      "label": "is_touching",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nis_touching(obj1, obj2) → boolean\n```\nChecks if two objects are touching at current world time.",
      "parameters": [
        "obj1",
        "obj2"
      ]
    },
    "make_force": {
      "label": "make_force",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nmake_force(dir, mag, dur, start) → Force\n```\nMakes a force with direction vector, magnitude, force duration and start time.",
      "parameters": [
        "dir",
        "mag",
        "dur",
        "start"
      ]
    },
    "make_ground": {
      "label": "make_ground",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nmake_ground(height, friction) → void\n```\nMakes the ground body of the world.",
      "parameters": [
        "height",
        "friction"
      ]
    },
    "make_vector": {
      "label": "make_vector",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nmake_vector(x, y) → Vector2\n```\nMakes a 2d vector with the given x and y components.",
      "parameters": [
        "x",
        "y"
      ]
    },
    "scale_size": {
      "label": "scale_size",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nscale_size(obj, scale) → void\n```\nResizes the object with given scale factor.",
      "parameters": [
        "obj",
        "scale"
      ]
    },
    "set_angular_velocity": {
      "label": "set_angular_velocity",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_angular_velocity(obj, velc) → void\n```\nSets current angular velocity of the object.",
      "parameters": [
        "obj",
        "velc"
      ]
    },
    "set_density": {
      "label": "set_density",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_density(obj, density) → void\n```\nSet density of the object.",
      "parameters": [
        "obj",
        "density"
      ]
    },
    "set_friction": {
      "label": "set_friction",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_friction(obj, friction) → void\n```\nSets the friction value of the object.",
      "parameters": [
        "obj",
        "friction"
      ]
    },
    "set_gravity": {
      "label": "set_gravity",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_gravity(v) → void\n```\nCreates a new physics world and sets the gravity of the world.",
      "parameters": [
        "v"
      ]
    },
    "set_position": {
      "label": "set_position",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_position(obj, pos) → void\n```\nSets the position of the object.",
      "parameters": [
        "obj",
        "pos"
      ]
    },
    "set_rotation": {
      "label": "set_rotation",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_rotation(obj, rot) → void\n```\nSets the rotation of the object.",
      "parameters": [
        "obj",
        "rot"
      ]
    },
    "set_velocity": {
      "label": "set_velocity",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nset_velocity(obj, velc) → void\n```\nSets current velocity of the object.",
      "parameters": [
        "obj",
        "velc"
      ]
    },
    "simulate_world": {
      "label": "simulate_world",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nsimulate_world(total_time) → void\n```\nSimulates the world for given duration.",
      "parameters": [
        "total_time"
      ]
    },
    "subtract_vector": {
      "label": "subtract_vector",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nsubtract_vector(vec1, vec2) → Vector2\n```\nSubtract the second vector from the first and returns the resultant vector.",
      "parameters": [
        "vec1",
        "vec2"
      ]
    },
    "update_world": {
      "label": "update_world",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nupdate_world(dt) → void\n```\nUpdates the world once with the given time step.",
      "parameters": [
        "dt"
      ]
    },
    "vector_to_array": {
      "label": "vector_to_array",
      "meta": "func",
      "title": "Auto-import from physics_2d",
      "description": "```source\nvector_to_array(vec) → number[]\n```\nConverts a 2d vector into an array.",
      "parameters": [
        "vec"
      ]
    }
  },
  "robot_simulation": {
    "addControllerToWorld": {
      "label": "addControllerToWorld",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\naddControllerToWorld(controller, world) → void\n```\nAdd a controller to the world.\n\nThe controller is a unit of computation modelled after Unity's MonoBehaviour. It is used to encapsulate the logic of the simulation. Controllers can be used to create robots, sensors, actuators, and other objects in the simulation.\n\nThe controller should be added to the world using this function in order for the simulation to access the controller's logic.\n\n_\\*This is a Utility function and should be called within init\\_simulation._",
      "parameters": [
        "controller",
        "world"
      ]
    },
    "createCSE": {
      "label": "createCSE",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateCSE() → Program\n```\nCreates a CSE machine as a Program Object. The CSE machine is used to evaluate the code written by the user. The execution of the code will be automatically synchronized with the simulation to ensure that the code is executed at the correct time.\n\nThe returned Program object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": []
    },
    "createCuboid": {
      "label": "createCuboid",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateCuboid(physics, renderer, position_x, position_y, position_z, width, length, height, mass, color, bodyType) → Cuboid\n```\nCreates a cuboid. joel-todo: The dynamic version wont work\n\nThis function is used to create the floor and wall controllers.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": [
        "physics",
        "renderer",
        "position_x",
        "position_y",
        "position_z",
        "width",
        "length",
        "height",
        "mass",
        "color",
        "bodyType"
      ]
    },
    "createCustomPhysics": {
      "label": "createCustomPhysics",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateCustomPhysics(gravity, timestep) → Physics\n```\nCreate a physics engine with the provided gravity and timestep. A physics engine with default gravity and timestep can be created using createPhysics.\n\nThe returned Physics object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": [
        "gravity",
        "timestep"
      ]
    },
    "createEv3": {
      "label": "createEv3",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateEv3(physics, renderer) → DefaultEv3\n```\nCreate an EV3.\n\nThe resulting EV3 should be saved to the context using saveToContext.\n\nThe returned EV3 object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": [
        "physics",
        "renderer"
      ]
    },
    "createFloor": {
      "label": "createFloor",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateFloor(physics, renderer) → Cuboid\n```\nCreate a floor. This function is a wrapper around createCuboid.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": [
        "physics",
        "renderer"
      ]
    },
    "createPaper": {
      "label": "createPaper",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreatePaper(render, url, width, height, x, y, rotation) → Paper\n```\nCreates a paper on the floor.\n\nThe returned Paper object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": [
        "render",
        "url",
        "width",
        "height",
        "x",
        "y",
        "rotation"
      ]
    },
    "createPhysics": {
      "label": "createPhysics",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreatePhysics() → Physics\n```\nCreate a physics engine with default gravity and timestep. Default gravity is -9.81 and timestep is 1/20. A custom physics engine can be created using createCustomPhysics.\n\nThe returned Physics object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": []
    },
    "createRenderer": {
      "label": "createRenderer",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateRenderer() → Renderer\n```\nCreates a renderer for the simulation.\n\nThe returned Renderer object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": []
    },
    "createRobotConsole": {
      "label": "createRobotConsole",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateRobotConsole() → RobotConsole\n```\nCreates a RobotConsole for the simulation.\n\nThe RobotConsole is used to display messages and errors to the user. The console messages can be seen in the console tab of the simulator.\n\nThe returned RobotConsole object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": []
    },
    "createTimer": {
      "label": "createTimer",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateTimer() → Timer\n```\nCreates a Timer for the simulation.\n\nThe returned Timer object is designed to be passed into createWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": []
    },
    "createWall": {
      "label": "createWall",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateWall(physics, renderer, x, y, width, length, height) → Cuboid\n```\nCreates a wall. This function is a wrapper around createCuboid.\n\nThe returned Cuboid object is designed to be added to the world using addControllerToWorld.\n\n**This is a Controller function and should be called within init\\_simulation.**",
      "parameters": [
        "physics",
        "renderer",
        "x",
        "y",
        "width",
        "length",
        "height"
      ]
    },
    "createWorld": {
      "label": "createWorld",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ncreateWorld(physics, renderer, timer, robotConsole) → World\n```\nCreates a custom world with the provided physics, renderer, timer and console .\n\nA world is responsible for managing the physics, rendering, timing and console of the simulation. It also manages the controllers that are added to the world, ensuring that the appropriate functions are called at the correct time.\n\nThe returned World object is designed to be returned by the init\\_simulation callback.\n\nYou can add controllers to the world using addControllerToWorld.\n\n**This is a configuration function and should be called within init\\_simulation.**",
      "parameters": [
        "physics",
        "renderer",
        "timer",
        "robotConsole"
      ]
    },
    "ev3_colorSensor": {
      "label": "ev3_colorSensor",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_colorSensor() → ColorSensor\n```\nGets the colour sensor connected any of ports 1, 2, 3 or 4.",
      "parameters": []
    },
    "ev3_colorSensorBlue": {
      "label": "ev3_colorSensorBlue",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_colorSensorBlue(colorSensor) → number\n```\nGets the amount of blue seen by the colour sensor.",
      "parameters": [
        "colorSensor"
      ]
    },
    "ev3_colorSensorGreen": {
      "label": "ev3_colorSensorGreen",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_colorSensorGreen(colorSensor) → number\n```\nGets the amount of green seen by the colour sensor.",
      "parameters": [
        "colorSensor"
      ]
    },
    "ev3_colorSensorRed": {
      "label": "ev3_colorSensorRed",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_colorSensorRed(colorSensor) → number\n```\nGets the amount of red seen by the colour sensor.",
      "parameters": [
        "colorSensor"
      ]
    },
    "ev3_motorA": {
      "label": "ev3_motorA",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_motorA() → MotorFunctionReturnType\n```\nGets the motor connected to port A.",
      "parameters": []
    },
    "ev3_motorB": {
      "label": "ev3_motorB",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_motorB() → MotorFunctionReturnType\n```\nGets the motor connected to port B.",
      "parameters": []
    },
    "ev3_motorC": {
      "label": "ev3_motorC",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_motorC() → MotorFunctionReturnType\n```\nGets the motor connected to port C.",
      "parameters": []
    },
    "ev3_motorD": {
      "label": "ev3_motorD",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_motorD() → MotorFunctionReturnType\n```\nGets the motor connected to port D.",
      "parameters": []
    },
    "ev3_pause": {
      "label": "ev3_pause",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_pause(duration) → void\n```\nPauses for a period of time.",
      "parameters": [
        "duration"
      ]
    },
    "ev3_runToRelativePosition": {
      "label": "ev3_runToRelativePosition",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_runToRelativePosition(motor, position, speed) → void\n```\nCauses the motor to rotate until the position reaches ev3\\_motorGetPosition() + position with the given speed. Note: this works by sending instructions to the motors. This will return almost immediately, without waiting for the motor to reach the given absolute position. If you wish to wait, use ev3\\_pause.",
      "parameters": [
        "motor",
        "position",
        "speed"
      ]
    },
    "ev3_ultrasonicSensor": {
      "label": "ev3_ultrasonicSensor",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_ultrasonicSensor() → UltrasonicSensor\n```\nGets the ultrasonic sensor connected any of ports 1, 2, 3 or 4.",
      "parameters": []
    },
    "ev3_ultrasonicSensorDistance": {
      "label": "ev3_ultrasonicSensorDistance",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nev3_ultrasonicSensorDistance(ultraSonicSensor) → number\n```\nGets the distance read by the ultrasonic sensor in centimeters.",
      "parameters": [
        "ultraSonicSensor"
      ]
    },
    "init_simulation": {
      "label": "init_simulation",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\ninit_simulation(worldFactory) → void\n```\nInitialize the simulation world. This function is to be called before the robot code. This function is used to describe the simulation environment and the controllers.\n\nThe callback function takes in no parameters and returns a world created by createWorld. The world should be configured with the physics, renderer, timer and console. The controllers should be added to the world using addControllerToWorld. The world should be saved to the context using saveToContext.",
      "parameters": [
        "worldFactory"
      ]
    },
    "saveToContext": {
      "label": "saveToContext",
      "meta": "func",
      "title": "Auto-import from robot_simulation",
      "description": "```source\nsaveToContext(key, value) → void\n```\nSave a value to the context.\n\nThere are 2 important values to be saved. The world and the ev3. The world needs to be saved in order for the simulation to access the physics, renderer, timer and console. The ev3 needs to be saved in order for the \"ev3\\_\" functions to access the EV3",
      "parameters": [
        "key",
        "value"
      ]
    }
  },
  "ar": {
    "alignmentBottom": {
      "label": "alignmentBottom",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentBottom:Bottom\nNo description available"
    },
    "alignmentCenter": {
      "label": "alignmentCenter",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentCenter:Center\nNo description available"
    },
    "alignmentLeft": {
      "label": "alignmentLeft",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentLeft:Left\nNo description available"
    },
    "alignmentMiddle": {
      "label": "alignmentMiddle",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentMiddle:Middle\nNo description available"
    },
    "alignmentRight": {
      "label": "alignmentRight",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentRight:Right\nNo description available"
    },
    "alignmentTop": {
      "label": "alignmentTop",
      "meta": "const",
      "title": "Auto-import from ar",
      "description": "#### alignmentTop:Top\nNo description available"
    },
    "addARObject": {
      "label": "addARObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\naddARObject(arObject) → void\n```\nAdds the specified object to the augmented world.",
      "parameters": [
        "arObject"
      ]
    },
    "clearARObjects": {
      "label": "clearARObjects",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nclearARObjects() → void\n```\nRemoves all objects in the augmented world.",
      "parameters": []
    },
    "clearMovement": {
      "label": "clearMovement",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nclearMovement(object) → void\n```\nRemoves the movement of the object.",
      "parameters": [
        "object"
      ]
    },
    "createCubeObject": {
      "label": "createCubeObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateCubeObject(position, width, height, depth, color, onSelect) → CubeObject\n```\nCreates an instance of an AR cube object.",
      "parameters": [
        "position",
        "width",
        "height",
        "depth",
        "color",
        "onSelect"
      ]
    },
    "createGltfObject": {
      "label": "createGltfObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateGltfObject(position, src, scale, onSelect) → GltfObject\n```\nCreates an instance of 3D object with GLTF model. Build it with `createInterfaceRow`, `createInterfaceColumn`, `createInterfaceText` and `createInterfaceImage`.",
      "parameters": [
        "position",
        "src",
        "scale",
        "onSelect"
      ]
    },
    "createInterfaceBase64Image": {
      "label": "createInterfaceBase64Image",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceBase64Image(base64, imageWidth, imageHeight, paddingLeft, paddingRight, paddingTop, paddingBottom) → UIBase64ImageComponent\n```\nCreates an image component for UI object, using Base64 string. Crops the image to the specified size.",
      "parameters": [
        "base64",
        "imageWidth",
        "imageHeight",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom"
      ]
    },
    "createInterfaceColumn": {
      "label": "createInterfaceColumn",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceColumn(children, horizontalAlignment, paddingLeft, paddingRight, paddingTop, paddingBottom, backgroundColor) → UIColumnItem\n```\nCreates a row component for UI object.",
      "parameters": [
        "children",
        "horizontalAlignment",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom",
        "backgroundColor"
      ]
    },
    "createInterfaceImage": {
      "label": "createInterfaceImage",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceImage(src, imageWidth, imageHeight, paddingLeft, paddingRight, paddingTop, paddingBottom) → UIImageItem\n```\nCreates an image component for UI object. Crops the image to the specified size.",
      "parameters": [
        "src",
        "imageWidth",
        "imageHeight",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom"
      ]
    },
    "createInterfaceObject": {
      "label": "createInterfaceObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceObject(position, rootComponent, onSelect) → UIObject\n```\nCreates an instance of AR user interface. Build it with `createInterfaceRow`, `createInterfaceColumn`, `createInterfaceText` and `createInterfaceImage`.",
      "parameters": [
        "position",
        "rootComponent",
        "onSelect"
      ]
    },
    "createInterfaceRow": {
      "label": "createInterfaceRow",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceRow(children, verticalAlignment, paddingLeft, paddingRight, paddingTop, paddingBottom, backgroundColor) → UIRowItem\n```\nCreates a row component for UI object.",
      "parameters": [
        "children",
        "verticalAlignment",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom",
        "backgroundColor"
      ]
    },
    "createInterfaceText": {
      "label": "createInterfaceText",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateInterfaceText(text, textSize, textWidth, textAlign, paddingLeft, paddingRight, paddingTop, paddingBottom, color) → UITextItem\n```\nCreates a text component for UI object.",
      "parameters": [
        "text",
        "textSize",
        "textWidth",
        "textAlign",
        "paddingLeft",
        "paddingRight",
        "paddingTop",
        "paddingBottom",
        "color"
      ]
    },
    "createLightObject": {
      "label": "createLightObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateLightObject(position, intensity) → LightObject\n```\nCreates an instance of light source in augmented world. Shines in all direction from a point.",
      "parameters": [
        "position",
        "intensity"
      ]
    },
    "createPathItem": {
      "label": "createPathItem",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreatePathItem(start, end, duration) → PathItem\n```\nCreates an instance of a path item, to specify movement path.",
      "parameters": [
        "start",
        "end",
        "duration"
      ]
    },
    "createSphereObject": {
      "label": "createSphereObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateSphereObject(position, radius, color, onSelect) → SphereObject\n```\nCreates an instance of an AR sphere object.",
      "parameters": [
        "position",
        "radius",
        "color",
        "onSelect"
      ]
    },
    "createVector3": {
      "label": "createVector3",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ncreateVector3(x, y, z) → Vector3\n```\nCreates an instance of Vector3.",
      "parameters": [
        "x",
        "y",
        "z"
      ]
    },
    "getARObjects": {
      "label": "getARObjects",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetARObjects() → ARObject[]\n```\nObtains the current ARObjects.",
      "parameters": []
    },
    "getFrontObject": {
      "label": "getFrontObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetFrontObject() → undefined | ARObject\n```\nObtains the first object in the user's line of sight, if any.",
      "parameters": []
    },
    "getJsonChild": {
      "label": "getJsonChild",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetJsonChild(object, key) → any\n```\nObtains the value of a json object at the key.",
      "parameters": [
        "object",
        "key"
      ]
    },
    "getXPosition": {
      "label": "getXPosition",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetXPosition(arObject) → number\n```\nObtains the position of the specified object on the x-axis.",
      "parameters": [
        "arObject"
      ]
    },
    "getYPosition": {
      "label": "getYPosition",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetYPosition(arObject) → number\n```\nObtains the position of the specified object on the y-axis.",
      "parameters": [
        "arObject"
      ]
    },
    "getZPosition": {
      "label": "getZPosition",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ngetZPosition(arObject) → number\n```\nObtains the position of the specified object on the z-axis.",
      "parameters": [
        "arObject"
      ]
    },
    "initAR": {
      "label": "initAR",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\ninitAR() → void\n```\nInitialize AR.",
      "parameters": []
    },
    "moveARObject": {
      "label": "moveARObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nmoveARObject(arObject, position) → void\n```\nMoves the specified object to a new position.",
      "parameters": [
        "arObject",
        "position"
      ]
    },
    "removeARObject": {
      "label": "removeARObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nremoveARObject(arObject) → void\n```\nRemoves the specified object from the augmented world.",
      "parameters": [
        "arObject"
      ]
    },
    "removeCenterToggle": {
      "label": "removeCenterToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nremoveCenterToggle() → void\n```\nResets and hides the center toggle.",
      "parameters": []
    },
    "removeLeftToggle": {
      "label": "removeLeftToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nremoveLeftToggle() → void\n```\nResets and hides the left toggle.",
      "parameters": []
    },
    "removeRightToggle": {
      "label": "removeRightToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nremoveRightToggle() → void\n```\nResets and hides the right toggle.",
      "parameters": []
    },
    "selectObject": {
      "label": "selectObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nselectObject(arObject, isSelected) → void\n```\nSets the select state for the specified AR object.",
      "parameters": [
        "arObject",
        "isSelected"
      ]
    },
    "setAlwaysRender": {
      "label": "setAlwaysRender",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetAlwaysRender(object) → void\n```\nAlways render the object.",
      "parameters": [
        "object"
      ]
    },
    "setAsARObjects": {
      "label": "setAsARObjects",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetAsARObjects(json) → void\n```\nSets AR objects from json.",
      "parameters": [
        "json"
      ]
    },
    "setCenterToggle": {
      "label": "setCenterToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetCenterToggle(text, callback) → void\n```\nSets the center toggle.",
      "parameters": [
        "text",
        "callback"
      ]
    },
    "setFixedRotation": {
      "label": "setFixedRotation",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetFixedRotation(object, radians) → void\n```\nFix the rotation of the object at the specified angle around the vertical axis.",
      "parameters": [
        "object",
        "radians"
      ]
    },
    "setHighlightFrontObject": {
      "label": "setHighlightFrontObject",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetHighlightFrontObject(isEnabled) → void\n```\nTurn on highlighting of object that the user is facing.",
      "parameters": [
        "isEnabled"
      ]
    },
    "setLeftToggle": {
      "label": "setLeftToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetLeftToggle(text, callback) → void\n```\nSets the left toggle.",
      "parameters": [
        "text",
        "callback"
      ]
    },
    "setOrbitMovement": {
      "label": "setOrbitMovement",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetOrbitMovement(object, radius, duration) → void\n```\nOrbits the object around its current position.",
      "parameters": [
        "object",
        "radius",
        "duration"
      ]
    },
    "setPathMovement": {
      "label": "setPathMovement",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetPathMovement(object, path) → void\n```\nMoves object in the specified path, repeat when ended.",
      "parameters": [
        "object",
        "path"
      ]
    },
    "setRenderDistance": {
      "label": "setRenderDistance",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetRenderDistance(object, distance) → void\n```\nOnly render the object when in range.",
      "parameters": [
        "object",
        "distance"
      ]
    },
    "setRightToggle": {
      "label": "setRightToggle",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetRightToggle(text, callback) → void\n```\nSets the right toggle.",
      "parameters": [
        "text",
        "callback"
      ]
    },
    "setRotateAroundY": {
      "label": "setRotateAroundY",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetRotateAroundY(object) → void\n```\nRotates the object continuously around the vertical axis.",
      "parameters": [
        "object"
      ]
    },
    "setRotateToUser": {
      "label": "setRotateToUser",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetRotateToUser(object) → void\n```\nAlways rotate the object to where the user is facing.",
      "parameters": [
        "object"
      ]
    },
    "setSpringMovement": {
      "label": "setSpringMovement",
      "meta": "func",
      "title": "Auto-import from ar",
      "description": "```source\nsetSpringMovement(object) → void\n```\nAnimates movement when the position of the object changes.",
      "parameters": [
        "object"
      ]
    }
  },
  "communication": {
    "STATE_CONNECTED": {
      "label": "STATE_CONNECTED",
      "meta": "const",
      "title": "Auto-import from communication",
      "description": "#### STATE_CONNECTED:\"Connected\"\nNo description available"
    },
    "STATE_DISCONNECTED": {
      "label": "STATE_DISCONNECTED",
      "meta": "const",
      "title": "Auto-import from communication",
      "description": "#### STATE_DISCONNECTED:\"Disconnected\"\nNo description available"
    },
    "STATE_OFFLINE": {
      "label": "STATE_OFFLINE",
      "meta": "const",
      "title": "Auto-import from communication",
      "description": "#### STATE_OFFLINE:\"Offline\"\nNo description available"
    },
    "STATE_RECONNECTING": {
      "label": "STATE_RECONNECTING",
      "meta": "const",
      "title": "Auto-import from communication",
      "description": "#### STATE_RECONNECTING:\"Reconnecting\"\nNo description available"
    },
    "callFunction": {
      "label": "callFunction",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ncallFunction(receiver, name, args, callback) → void\n```\nCalls a function exposed by another user.",
      "parameters": [
        "receiver",
        "name",
        "args",
        "callback"
      ]
    },
    "expose": {
      "label": "expose",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\nexpose(name, func) → void\n```\nExposes the specified function to other users. Other users can use \"callFunction\" to call this function.",
      "parameters": [
        "name",
        "func"
      ]
    },
    "getGlobalState": {
      "label": "getGlobalState",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ngetGlobalState() → any\n```\nObtains the current global state.",
      "parameters": []
    },
    "getUserId": {
      "label": "getUserId",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ngetUserId() → string\n```\nObtains the user's ID.",
      "parameters": []
    },
    "initCommunications": {
      "label": "initCommunications",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ninitCommunications(address, port, user, password) → void\n```\nInitializes connection with MQTT broker. Currently only supports WebSocket.",
      "parameters": [
        "address",
        "port",
        "user",
        "password"
      ]
    },
    "initGlobalState": {
      "label": "initGlobalState",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ninitGlobalState(topicHeader, callback) → void\n```\nInitializes global state.",
      "parameters": [
        "topicHeader",
        "callback"
      ]
    },
    "initRpc": {
      "label": "initRpc",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\ninitRpc(topicHeader, userId) → void\n```\nInitializes RPC.",
      "parameters": [
        "topicHeader",
        "userId"
      ]
    },
    "keepRunning": {
      "label": "keepRunning",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\nkeepRunning() → void\n```\nKeeps the program running so that messages can come in.",
      "parameters": []
    },
    "stopRunning": {
      "label": "stopRunning",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\nstopRunning() → void\n```\nRemoves interval that keeps the program running.",
      "parameters": []
    },
    "updateGlobalState": {
      "label": "updateGlobalState",
      "meta": "func",
      "title": "Auto-import from communication",
      "description": "```source\nupdateGlobalState(path, updatedState) → void\n```\nBroadcasts the new states to all devices. Has ability to modify only part of the JSON state.",
      "parameters": [
        "path",
        "updatedState"
      ]
    }
  },
  "nbody": {
    "addVectors": {
      "label": "addVectors",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\naddVectors(v1, v2) → Vector3\n```\nAdd two vectors.",
      "parameters": [
        "v1",
        "v2"
      ]
    },
    "clone": {
      "label": "clone",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nclone(obj) → CelestialBody | State | Universe | Vector3\n```\nDeep clone an object.",
      "parameters": [
        "obj"
      ]
    },
    "createBodyCenterTransformation": {
      "label": "createBodyCenterTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateBodyCenterTransformation(i) → BodyCenterTransformation\n```\nCreate a frame of reference transformation that moves the origin to the center of ith both.",
      "parameters": [
        "i"
      ]
    },
    "createCelestialBody": {
      "label": "createCelestialBody",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateCelestialBody(label, mass, radius, position, velocity, acceleration) → CelestialBody\n```\nCreate a new celestial body.",
      "parameters": [
        "label",
        "mass",
        "radius",
        "position",
        "velocity",
        "acceleration"
      ]
    },
    "createCentripetalForce": {
      "label": "createCentripetalForce",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateCentripetalForce(center) → CentripetalForce\n```\nCreate a centripetal force that pulls bodies towards a center.",
      "parameters": [
        "center"
      ]
    },
    "createCoMTransformation": {
      "label": "createCoMTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateCoMTransformation() → CoMTransformation\n```\nCreate a frame of reference transformation that moves the origin to the center of mass of the system.",
      "parameters": []
    },
    "createCombinedForce": {
      "label": "createCombinedForce",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateCombinedForce(forces) → CombinedForce\n```\nCreate a combined force that is an additive combination of all the given forces.",
      "parameters": [
        "forces"
      ]
    },
    "createExplicitEulerSim": {
      "label": "createExplicitEulerSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateExplicitEulerSim(force) → ExplicitEulerSim\n```\nCreate an explicit euler integrator to be used as the simulation function.",
      "parameters": [
        "force"
      ]
    },
    "createForce": {
      "label": "createForce",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateForce(fn) → Force\n```\nCreate a force that applies to all bodies using the provided higher order/lambda/arrow/anonymous function.",
      "parameters": [
        "fn"
      ]
    },
    "createGravity": {
      "label": "createGravity",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateGravity(G) → Gravity\n```\nCreate a force that applies to all bodies.",
      "parameters": [
        "G"
      ]
    },
    "createLambdaSim": {
      "label": "createLambdaSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateLambdaSim(fn) → LambdaSim\n```\nCreate a simulate function (usually a numerical integrator) that is used to simulate the nbody system using the provided higher order/lambda/arrow/anonymous function.",
      "parameters": [
        "fn"
      ]
    },
    "createLambdaTransformation": {
      "label": "createLambdaTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateLambdaTransformation(fn) → LambdaTransformation\n```\nCreate a frame of reference transformation using a higher order/lambda/arrow/anonymous function.",
      "parameters": [
        "fn"
      ]
    },
    "createPinTransformation": {
      "label": "createPinTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreatePinTransformation(axis, i) → PinTransformation\n```\nCreate a frame of reference transformation that pins the ith body to a specific axis.",
      "parameters": [
        "axis",
        "i"
      ]
    },
    "createRotateTransformation": {
      "label": "createRotateTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateRotateTransformation(axis, angle) → RotateTransformation\n```\nCreate a frame of reference transformation that rotates the system around an axis by an angle.",
      "parameters": [
        "axis",
        "angle"
      ]
    },
    "createRungeKutta4Sim": {
      "label": "createRungeKutta4Sim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateRungeKutta4Sim(force, weights) → RungeKutta4Sim\n```\nCreate a numerical integrator that uses the Runge-Kutta 4 method to simulate the nbody system.",
      "parameters": [
        "force",
        "weights"
      ]
    },
    "createSemiImplicitEulerSim": {
      "label": "createSemiImplicitEulerSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateSemiImplicitEulerSim(force) → SemiImplicitEulerSim\n```\nCreate a numerical integrator that uses the semi-implicit Euler method to simulate the nbody system.",
      "parameters": [
        "force"
      ]
    },
    "createSimulation": {
      "label": "createSimulation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateSimulation(universes, visType, record, looped, showTrails, maxTrailLength) → Simulation\n```\nCreate a new simulation.",
      "parameters": [
        "universes",
        "visType",
        "record",
        "looped",
        "showTrails",
        "maxTrailLength"
      ]
    },
    "createState": {
      "label": "createState",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateState(bodies) → State\n```\nCreate a new state snapshot of the universe.",
      "parameters": [
        "bodies"
      ]
    },
    "createTimedRotateTransformation": {
      "label": "createTimedRotateTransformation",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateTimedRotateTransformation(axis, revolutionTime) → TimedRotateTransformation\n```\nCreate a frame of reference transformation that rotates the system by 360 deg around an axis over a period of time.",
      "parameters": [
        "axis",
        "revolutionTime"
      ]
    },
    "createUniverse": {
      "label": "createUniverse",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateUniverse(label, color, prevState, currState, simFunc, transformations) → Universe\n```\nCreate a new universe.",
      "parameters": [
        "label",
        "color",
        "prevState",
        "currState",
        "simFunc",
        "transformations"
      ]
    },
    "createVector": {
      "label": "createVector",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateVector(x, y, z) → Vector3\n```\nCreate a new 3D vector.",
      "parameters": [
        "x",
        "y",
        "z"
      ]
    },
    "createVelocityVerletSim": {
      "label": "createVelocityVerletSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ncreateVelocityVerletSim(force) → VelocityVerletSim\n```\nCreate a numerical integrator that uses the velocity Verlet method to simulate the nbody system.",
      "parameters": [
        "force"
      ]
    },
    "getBodies": {
      "label": "getBodies",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ngetBodies(state) → CelestialBody[]\n```\nGet the bodies in a state.",
      "parameters": [
        "state"
      ]
    },
    "getX": {
      "label": "getX",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ngetX(v) → number\n```\nGet the x component of a vector.",
      "parameters": [
        "v"
      ]
    },
    "getY": {
      "label": "getY",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ngetY(v) → number\n```\nGet the y component of a vector.",
      "parameters": [
        "v"
      ]
    },
    "getZ": {
      "label": "getZ",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\ngetZ(v) → number\n```\nGet the z component of a vector.",
      "parameters": [
        "v"
      ]
    },
    "multiplyScalar": {
      "label": "multiplyScalar",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nmultiplyScalar(v, s) → Vector3\n```\nMultiply a vector by a scalar.",
      "parameters": [
        "v",
        "s"
      ]
    },
    "playSim": {
      "label": "playSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nplaySim(sim) → void\n```\nPlay a simulation.",
      "parameters": [
        "sim"
      ]
    },
    "recordSim": {
      "label": "recordSim",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nrecordSim(sim, recordFor, recordSpeed) → void\n```\nRecord and play a simulation.",
      "parameters": [
        "sim",
        "recordFor",
        "recordSpeed"
      ]
    },
    "setX": {
      "label": "setX",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nsetX(v, x) → void\n```\nSet the x component of a vector.",
      "parameters": [
        "v",
        "x"
      ]
    },
    "setY": {
      "label": "setY",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nsetY(v, y) → void\n```\nSet the y component of a vector.",
      "parameters": [
        "v",
        "y"
      ]
    },
    "setZ": {
      "label": "setZ",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nsetZ(v, z) → void\n```\nSet the z component of a vector.",
      "parameters": [
        "v",
        "z"
      ]
    },
    "subVectors": {
      "label": "subVectors",
      "meta": "func",
      "title": "Auto-import from nbody",
      "description": "```source\nsubVectors(v1, v2) → Vector3\n```\nSubtract two vectors.",
      "parameters": [
        "v1",
        "v2"
      ]
    }
  },
  "unittest": {
    "default": {
      "label": "default",
      "meta": "const",
      "title": "Auto-import from unittest",
      "description": "#### default:Object\nNo description available"
    }
  }
}